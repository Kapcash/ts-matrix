var tsm=function(t){var s={};function e(i){if(s[i])return s[i].exports;var a=s[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,e),a.l=!0,a.exports}return e.m=t,e.c=s,e.d=function(t,s,i){e.o(t,s)||Object.defineProperty(t,s,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,s){if(1&s&&(t=e(t)),8&s)return t;if(4&s&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&s&&"string"!=typeof t)for(var a in t)e.d(i,a,function(s){return t[s]}.bind(null,a));return i},e.n=function(t){var s=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(s,"a",s),s},e.o=function(t,s){return Object.prototype.hasOwnProperty.call(t,s)},e.p="",e(e.s=0)}([function(t,s,e){"use strict";e.r(s);class i{constructor(t){this.values=new Float32Array(4),void 0!==t&&(this.xyzw=t)}get x(){return this.values[0]}get y(){return this.values[1]}get z(){return this.values[2]}get w(){return this.values[3]}get xy(){return[this.values[0],this.values[1]]}get xyz(){return[this.values[0],this.values[1],this.values[2]]}get xyzw(){return[this.values[0],this.values[1],this.values[2],this.values[3]]}set x(t){this.values[0]=t}set y(t){this.values[1]=t}set z(t){this.values[2]=t}set w(t){this.values[3]=t}set xy(t){this.values[0]=t[0],this.values[1]=t[1]}set xyz(t){this.values[0]=t[0],this.values[1]=t[1],this.values[2]=t[2]}set xyzw(t){this.values[0]=t[0],this.values[1]=t[1],this.values[2]=t[2],this.values[3]=t[3]}get r(){return this.values[0]}get g(){return this.values[1]}get b(){return this.values[2]}get a(){return this.values[3]}get rg(){return[this.values[0],this.values[1]]}get rgb(){return[this.values[0],this.values[1],this.values[2]]}get rgba(){return[this.values[0],this.values[1],this.values[2],this.values[3]]}set r(t){this.values[0]=t}set g(t){this.values[1]=t}set b(t){this.values[2]=t}set a(t){this.values[3]=t}set rg(t){this.values[0]=t[0],this.values[1]=t[1]}set rgb(t){this.values[0]=t[0],this.values[1]=t[1],this.values[2]=t[2]}set rgba(t){this.values[0]=t[0],this.values[1]=t[1],this.values[2]=t[2],this.values[3]=t[3]}at(t){return this.values[t]}reset(){this.x=0,this.y=0,this.z=0,this.w=0}copy(t){return t||(t=new i),t.x=this.x,t.y=this.y,t.z=this.z,t.w=this.w,t}negate(t){return t||(t=this),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=-this.w,t}equals(t,s=1e-5){return!(Math.abs(this.x-t.x)>s)&&(!(Math.abs(this.y-t.y)>s)&&(!(Math.abs(this.z-t.z)>s)&&!(Math.abs(this.w-t.w)>s)))}length(){return Math.sqrt(this.squaredLength())}squaredLength(){const t=this.x,s=this.y,e=this.z,i=this.w;return t*t+s*s+e*e+i*i}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}subtract(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}scale(t,s){return s||(s=this),s.x*=t,s.y*=t,s.z*=t,s.w*=t,s}normalize(t){t||(t=this);let s=this.length();return 1===s?this:0===s?(t.x*=0,t.y*=0,t.z*=0,t.w*=0,t):(s=1/s,t.x*=s,t.y*=s,t.z*=s,t.w*=s,t)}multiplyMat4(t,s){return s||(s=this),t.multiplyVec4(this,s)}static mix(t,s,e,a){return a||(a=new i),a.x=t.x+e*(s.x-t.x),a.y=t.y+e*(s.y-t.y),a.z=t.z+e*(s.z-t.z),a.w=t.w+e*(s.w-t.w),a}static sum(t,s,e){return e||(e=new i),e.x=t.x+s.x,e.y=t.y+s.y,e.z=t.z+s.z,e.w=t.w+s.w,e}static difference(t,s,e){return e||(e=new i),e.x=t.x-s.x,e.y=t.y-s.y,e.z=t.z-s.z,e.w=t.w-s.w,e}static product(t,s,e){return e||(e=new i),e.x=t.x*s.x,e.y=t.y*s.y,e.z=t.z*s.z,e.w=t.w*s.w,e}static quotient(t,s,e){return e||(e=new i),e.x=t.x/s.x,e.y=t.y/s.y,e.z=t.z/s.z,e.w=t.w/s.w,e}}i.zero=new i([0,0,0,1]),i.one=new i([1,1,1,1]);class a{constructor(t){this.values=new Float32Array(16),void 0!==t&&this.init(t)}at(t){return this.values[t]}init(t){for(let s=0;s<16;s++)this.values[s]=t[s];return this}reset(){for(let t=0;t<16;t++)this.values[t]=0}copy(t){t||(t=new a);for(let s=0;s<16;s++)t.values[s]=this.values[s];return t}all(){const t=[];for(let s=0;s<16;s++)t[s]=this.values[s];return t}row(t){return[this.values[4*t+0],this.values[4*t+1],this.values[4*t+2],this.values[4*t+3]]}col(t){return[this.values[t],this.values[t+4],this.values[t+8],this.values[t+12]]}equals(t,s=1e-5){for(let e=0;e<16;e++)if(Math.abs(this.values[e]-t.at(e))>s)return!1;return!0}determinant(){const t=this.values[0],s=this.values[1],e=this.values[2],i=this.values[3],a=this.values[4],u=this.values[5],h=this.values[6],l=this.values[7],r=this.values[8],v=this.values[9],n=this.values[10],y=this.values[11],x=this.values[12],o=this.values[13],c=this.values[14],z=this.values[15];return(t*u-s*a)*(n*z-y*c)-(t*h-e*a)*(v*z-y*o)+(t*l-i*a)*(v*c-n*o)+(s*h-e*u)*(r*z-y*x)-(s*l-i*u)*(r*c-n*x)+(e*l-i*h)*(r*o-v*x)}setIdentity(){return this.values[0]=1,this.values[1]=0,this.values[2]=0,this.values[3]=0,this.values[4]=0,this.values[5]=1,this.values[6]=0,this.values[7]=0,this.values[8]=0,this.values[9]=0,this.values[10]=1,this.values[11]=0,this.values[12]=0,this.values[13]=0,this.values[14]=0,this.values[15]=1,this}transpose(){const t=this.values[1],s=this.values[2],e=this.values[3],i=this.values[6],a=this.values[7],u=this.values[11];return this.values[1]=this.values[4],this.values[2]=this.values[8],this.values[3]=this.values[12],this.values[4]=t,this.values[6]=this.values[9],this.values[7]=this.values[13],this.values[8]=s,this.values[9]=i,this.values[11]=this.values[14],this.values[12]=e,this.values[13]=a,this.values[14]=u,this}inverse(){const t=this.values[0],s=this.values[1],e=this.values[2],i=this.values[3],a=this.values[4],u=this.values[5],h=this.values[6],l=this.values[7],r=this.values[8],v=this.values[9],n=this.values[10],y=this.values[11],x=this.values[12],o=this.values[13],c=this.values[14],z=this.values[15],w=t*u-s*a,d=t*h-e*a,f=t*l-i*a,M=s*h-e*u,g=s*l-i*u,m=e*l-i*h,p=r*o-v*x,b=r*c-n*x,q=r*z-y*x,V=v*c-n*o,A=v*z-y*o,I=n*z-y*c;let j=w*I-d*A+f*V+M*q-g*b+m*p;if(!j)throw new Error("Can\t inverse this matrix as its determinant is 0");return j=1/j,this.values[0]=(u*I-h*A+l*V)*j,this.values[1]=(-s*I+e*A-i*V)*j,this.values[2]=(o*m-c*g+z*M)*j,this.values[3]=(-v*m+n*g-y*M)*j,this.values[4]=(-a*I+h*q-l*b)*j,this.values[5]=(t*I-e*q+i*b)*j,this.values[6]=(-x*m+c*f-z*d)*j,this.values[7]=(r*m-n*f+y*d)*j,this.values[8]=(a*A-u*q+l*p)*j,this.values[9]=(-t*A+s*q-i*p)*j,this.values[10]=(x*g-o*f+z*w)*j,this.values[11]=(-r*g+v*f-y*w)*j,this.values[12]=(-a*V+u*b-h*p)*j,this.values[13]=(t*V-s*b+e*p)*j,this.values[14]=(-x*M+o*d-c*w)*j,this.values[15]=(r*M-v*d+n*w)*j,this}multiply(t){const s=this.values[0],e=this.values[1],i=this.values[2],a=this.values[3],u=this.values[4],h=this.values[5],l=this.values[6],r=this.values[7],v=this.values[8],n=this.values[9],y=this.values[10],x=this.values[11],o=this.values[12],c=this.values[13],z=this.values[14],w=this.values[15];let d=t.at(0),f=t.at(1),M=t.at(2),g=t.at(3);return this.values[0]=d*s+f*u+M*v+g*o,this.values[1]=d*e+f*h+M*n+g*c,this.values[2]=d*i+f*l+M*y+g*z,this.values[3]=d*a+f*r+M*x+g*w,d=t.at(4),f=t.at(5),M=t.at(6),g=t.at(7),this.values[4]=d*s+f*u+M*v+g*o,this.values[5]=d*e+f*h+M*n+g*c,this.values[6]=d*i+f*l+M*y+g*z,this.values[7]=d*a+f*r+M*x+g*w,d=t.at(8),f=t.at(9),M=t.at(10),g=t.at(11),this.values[8]=d*s+f*u+M*v+g*o,this.values[9]=d*e+f*h+M*n+g*c,this.values[10]=d*i+f*l+M*y+g*z,this.values[11]=d*a+f*r+M*x+g*w,d=t.at(12),f=t.at(13),M=t.at(14),g=t.at(15),this.values[12]=d*s+f*u+M*v+g*o,this.values[13]=d*e+f*h+M*n+g*c,this.values[14]=d*i+f*l+M*y+g*z,this.values[15]=d*a+f*r+M*x+g*w,this}multiplyVec3(t){const s=t.x,e=t.y,i=t.z;return new l([this.values[0]*s+this.values[4]*e+this.values[8]*i+this.values[12],this.values[1]*s+this.values[5]*e+this.values[9]*i+this.values[13],this.values[2]*s+this.values[6]*e+this.values[10]*i+this.values[14]])}multiplyVec4(t,s){s||(s=new i);const e=t.x,a=t.y,u=t.z,h=t.w;return s.x=this.values[0]*e+this.values[4]*a+this.values[8]*u+this.values[12]*h,s.y=this.values[1]*e+this.values[5]*a+this.values[9]*u+this.values[13]*h,s.z=this.values[2]*e+this.values[6]*a+this.values[10]*u+this.values[14]*h,s.w=this.values[3]*e+this.values[7]*a+this.values[11]*u+this.values[15]*h,s}toMat3(){return new u([this.values[0],this.values[1],this.values[2],this.values[4],this.values[5],this.values[6],this.values[8],this.values[9],this.values[10]])}toInverseMat3(){const t=this.values[0],s=this.values[1],e=this.values[2],i=this.values[4],a=this.values[5],h=this.values[6],l=this.values[8],r=this.values[9],v=this.values[10],n=v*a-h*r,y=-v*i+h*l,x=r*i-a*l;let o=t*n+s*y+e*x;if(!o)throw new Error("Can\t inverse this matrix as its determinant is 0");return o=1/o,new u([n*o,(-v*s+e*r)*o,(h*s-e*a)*o,y*o,(v*t-e*l)*o,(-h*t+e*i)*o,x*o,(-r*t+s*l)*o,(a*t-s*i)*o])}translate(t){const s=t.x,e=t.y,i=t.z;return this.values[12]+=this.values[0]*s+this.values[4]*e+this.values[8]*i,this.values[13]+=this.values[1]*s+this.values[5]*e+this.values[9]*i,this.values[14]+=this.values[2]*s+this.values[6]*e+this.values[10]*i,this.values[15]+=this.values[3]*s+this.values[7]*e+this.values[11]*i,this}scale(t){const s=t.x,e=t.y,i=t.z;return this.values[0]*=s,this.values[1]*=s,this.values[2]*=s,this.values[3]*=s,this.values[4]*=e,this.values[5]*=e,this.values[6]*=e,this.values[7]*=e,this.values[8]*=i,this.values[9]*=i,this.values[10]*=i,this.values[11]*=i,this}rotate(t,s){let e=s.x,i=s.y,a=s.z,u=Math.sqrt(e*e+i*i+a*a);if(!u)throw new Error("Can't rotate this matrix as its length is 0.");1!==u&&(u=1/u,e*=u,i*=u,a*=u);const h=Math.sin(t),l=Math.cos(t),r=1-l,v=this.values[0],n=this.values[1],y=this.values[2],x=this.values[3],o=this.values[4],c=this.values[5],z=this.values[6],w=this.values[7],d=this.values[8],f=this.values[9],M=this.values[10],g=this.values[11],m=e*e*r+l,p=i*e*r+a*h,b=a*e*r-i*h,q=e*i*r-a*h,V=i*i*r+l,A=a*i*r+e*h,I=e*a*r+i*h,j=i*a*r-e*h,F=a*a*r+l;return this.values[0]=v*m+o*p+d*b,this.values[1]=n*m+c*p+f*b,this.values[2]=y*m+z*p+M*b,this.values[3]=x*m+w*p+g*b,this.values[4]=v*q+o*V+d*A,this.values[5]=n*q+c*V+f*A,this.values[6]=y*q+z*V+M*A,this.values[7]=x*q+w*V+g*A,this.values[8]=v*I+o*j+d*F,this.values[9]=n*I+c*j+f*F,this.values[10]=y*I+z*j+M*F,this.values[11]=x*I+w*j+g*F,this}static frustum(t,s,e,i,u,h){const l=s-t,r=i-e,v=h-u;return new a([2*u/l,0,0,0,0,2*u/r,0,0,(s+t)/l,(i+e)/r,-(h+u)/v,-1,0,0,-h*u*2/v,0])}static perspective(t,s,e,i){const u=e*Math.tan(t*Math.PI/360),h=u*s;return a.frustum(-h,h,-u,u,e,i)}static orthographic(t,s,e,i,u,h){const l=s-t,r=i-e,v=h-u;return new a([2/l,0,0,0,0,2/r,0,0,0,0,-2/v,0,-(t+s)/l,-(i+e)/r,-(h+u)/v,1])}static lookAt(t,s,e=l.up){if(t.equals(s))return this.identity;const i=l.difference(t,s).normalize(),u=l.cross(e,i).normalize(),h=l.cross(i,u).normalize();return new a([u.x,h.x,i.x,0,u.y,h.y,i.y,0,u.z,h.z,i.z,0,-l.dot(u,t),-l.dot(h,t),-l.dot(i,t),1])}static product(t,s,e){const i=t.at(0),u=t.at(1),h=t.at(2),l=t.at(3),r=t.at(4),v=t.at(5),n=t.at(6),y=t.at(7),x=t.at(8),o=t.at(9),c=t.at(10),z=t.at(11),w=t.at(12),d=t.at(13),f=t.at(14),M=t.at(15),g=s.at(0),m=s.at(1),p=s.at(2),b=s.at(3),q=s.at(4),V=s.at(5),A=s.at(6),I=s.at(7),j=s.at(8),F=s.at(9),O=s.at(10),C=s.at(11),E=s.at(12),L=s.at(13),P=s.at(14),_=s.at(15);return e?(e.init([g*i+m*r+p*x+b*w,g*u+m*v+p*o+b*d,g*h+m*n+p*c+b*f,g*l+m*y+p*z+b*M,q*i+V*r+A*x+I*w,q*u+V*v+A*o+I*d,q*h+V*n+A*c+I*f,q*l+V*y+A*z+I*M,j*i+F*r+O*x+C*w,j*u+F*v+O*o+C*d,j*h+F*n+O*c+C*f,j*l+F*y+O*z+C*M,E*i+L*r+P*x+_*w,E*u+L*v+P*o+_*d,E*h+L*n+P*c+_*f,E*l+L*y+P*z+_*M]),e):new a([g*i+m*r+p*x+b*w,g*u+m*v+p*o+b*d,g*h+m*n+p*c+b*f,g*l+m*y+p*z+b*M,q*i+V*r+A*x+I*w,q*u+V*v+A*o+I*d,q*h+V*n+A*c+I*f,q*l+V*y+A*z+I*M,j*i+F*r+O*x+C*w,j*u+F*v+O*o+C*d,j*h+F*n+O*c+C*f,j*l+F*y+O*z+C*M,E*i+L*r+P*x+_*w,E*u+L*v+P*o+_*d,E*h+L*n+P*c+_*f,E*l+L*y+P*z+_*M])}}a.identity=(new a).setIdentity();class u{constructor(t){this.values=new Float32Array(9),void 0!==t&&this.init(t)}at(t){return this.values[t]}init(t){for(let s=0;s<9;s++)this.values[s]=t[s];return this}reset(){for(let t=0;t<9;t++)this.values[t]=0}copy(t){t||(t=new u);for(let s=0;s<9;s++)t.values[s]=this.values[s];return t}all(){const t=[];for(let s=0;s<9;s++)t[s]=this.values[s];return t}row(t){return[this.values[3*t+0],this.values[3*t+1],this.values[3*t+2]]}col(t){return[this.values[t],this.values[t+3],this.values[t+6]]}equals(t,s=1e-5){for(let e=0;e<9;e++)if(Math.abs(this.values[e]-t.at(e))>s)return!1;return!0}determinant(){const t=this.values[0],s=this.values[1],e=this.values[2],i=this.values[3],a=this.values[4],u=this.values[5],h=this.values[6],l=this.values[7],r=this.values[8];return t*(r*a-u*l)+s*(-r*i+u*h)+e*(l*i-a*h)}setIdentity(){return this.values[0]=1,this.values[1]=0,this.values[2]=0,this.values[3]=0,this.values[4]=1,this.values[5]=0,this.values[6]=0,this.values[7]=0,this.values[8]=1,this}transpose(){const t=this.values[1],s=this.values[2],e=this.values[5];return this.values[1]=this.values[3],this.values[2]=this.values[6],this.values[3]=t,this.values[5]=this.values[7],this.values[6]=s,this.values[7]=e,this}inverse(){const t=this.values[0],s=this.values[1],e=this.values[2],i=this.values[3],a=this.values[4],u=this.values[5],h=this.values[6],l=this.values[7],r=this.values[8],v=r*a-u*l,n=-r*i+u*h,y=l*i-a*h;let x=t*v+s*n+e*y;if(!x)throw new Error("Can\t inverse this matrix as its determinant is 0");return x=1/x,this.values[0]=v*x,this.values[1]=(-r*s+e*l)*x,this.values[2]=(u*s-e*a)*x,this.values[3]=n*x,this.values[4]=(r*t-e*h)*x,this.values[5]=(-u*t+e*i)*x,this.values[6]=y*x,this.values[7]=(-l*t+s*h)*x,this.values[8]=(a*t-s*i)*x,this}multiply(t){const s=this.values[0],e=this.values[1],i=this.values[2],a=this.values[3],u=this.values[4],h=this.values[5],l=this.values[6],r=this.values[7],v=this.values[8],n=t.at(0),y=t.at(1),x=t.at(2),o=t.at(3),c=t.at(4),z=t.at(5),w=t.at(6),d=t.at(7),f=t.at(8);return this.values[0]=n*s+y*a+x*l,this.values[1]=n*e+y*u+x*r,this.values[2]=n*i+y*h+x*v,this.values[3]=o*s+c*a+z*l,this.values[4]=o*e+c*u+z*r,this.values[5]=o*i+c*h+z*v,this.values[6]=w*s+d*a+f*l,this.values[7]=w*e+d*u+f*r,this.values[8]=w*i+d*h+f*v,this}multiplyVec2(t,s){const e=t.x,i=t.y;return s?(s.xy=[e*this.values[0]+i*this.values[3]+this.values[6],e*this.values[1]+i*this.values[4]+this.values[7]],s):new r([e*this.values[0]+i*this.values[3]+this.values[6],e*this.values[1]+i*this.values[4]+this.values[7]])}multiplyVec3(t,s){const e=t.x,i=t.y,a=t.z;return s?(s.xyz=[e*this.values[0]+i*this.values[3]+a*this.values[6],e*this.values[1]+i*this.values[4]+a*this.values[7],e*this.values[2]+i*this.values[5]+a*this.values[8]],s):new l([e*this.values[0]+i*this.values[3]+a*this.values[6],e*this.values[1]+i*this.values[4]+a*this.values[7],e*this.values[2]+i*this.values[5]+a*this.values[8]])}toMat4(t){return t?(t.init([this.values[0],this.values[1],this.values[2],0,this.values[3],this.values[4],this.values[5],0,this.values[6],this.values[7],this.values[8],0,0,0,0,1]),t):new a([this.values[0],this.values[1],this.values[2],0,this.values[3],this.values[4],this.values[5],0,this.values[6],this.values[7],this.values[8],0,0,0,0,1])}toQuat(){const t=this.values[0],s=this.values[1],e=this.values[2],i=this.values[3],a=this.values[4],u=this.values[5],l=this.values[6],r=this.values[7],v=this.values[8],n=t-a-v,y=a-t-v,x=v-t-a;let o=0,c=t+a+v;n>c&&(c=n,o=1),y>c&&(c=y,o=2),x>c&&(c=x,o=3);const z=.5*Math.sqrt(c+1),w=.25/z,d=new h;switch(o){case 0:d.w=z,d.x=(u-r)*w,d.y=(l-e)*w,d.z=(s-i)*w;break;case 1:d.w=(u-r)*w,d.x=z,d.y=(s+i)*w,d.z=(l+e)*w;break;case 2:d.w=(l-e)*w,d.x=(s+i)*w,d.y=z,d.z=(u+r)*w;break;case 3:d.w=(s-i)*w,d.x=(l+e)*w,d.y=(u+r)*w,d.z=z}return d}rotate(t,s){let e=s.x,i=s.y,a=s.z,u=Math.sqrt(e*e+i*i+a*a);if(!u)throw new Error("Can't rotate this matrix as its length is 0.");1!==u&&(u=1/u,e*=u,i*=u,a*=u);const h=Math.sin(t),l=Math.cos(t),r=1-l,v=this.values[0],n=this.values[1],y=this.values[2],x=this.values[4],o=this.values[5],c=this.values[6],z=this.values[8],w=this.values[9],d=this.values[10],f=e*e*r+l,M=i*e*r+a*h,g=a*e*r-i*h,m=e*i*r-a*h,p=i*i*r+l,b=a*i*r+e*h,q=e*a*r+i*h,V=i*a*r-e*h,A=a*a*r+l;return this.values[0]=v*f+x*M+z*g,this.values[1]=n*f+o*M+w*g,this.values[2]=y*f+c*M+d*g,this.values[3]=v*m+x*p+z*b,this.values[4]=n*m+o*p+w*b,this.values[5]=y*m+c*p+d*b,this.values[6]=v*q+x*V+z*A,this.values[7]=n*q+o*V+w*A,this.values[8]=y*q+c*V+d*A,this}static product(t,s,e){const i=t.at(0),a=t.at(1),h=t.at(2),l=t.at(3),r=t.at(4),v=t.at(5),n=t.at(6),y=t.at(7),x=t.at(8),o=s.at(0),c=s.at(1),z=s.at(2),w=s.at(3),d=s.at(4),f=s.at(5),M=s.at(6),g=s.at(7),m=s.at(8);return e?(e.init([o*i+c*l+z*n,o*a+c*r+z*y,o*h+c*v+z*x,w*i+d*l+f*n,w*a+d*r+f*y,w*h+d*v+f*x,M*i+g*l+m*n,M*a+g*r+m*y,M*h+g*v+m*x]),e):new u([o*i+c*l+z*n,o*a+c*r+z*y,o*h+c*v+z*x,w*i+d*l+f*n,w*a+d*r+f*y,w*h+d*v+f*x,M*i+g*l+m*n,M*a+g*r+m*y,M*h+g*v+m*x])}}u.identity=(new u).setIdentity();class h{constructor(t){this.values=new Float32Array(4),void 0!==t&&(this.xyzw=t)}get x(){return this.values[0]}get y(){return this.values[1]}get z(){return this.values[2]}get w(){return this.values[3]}get xy(){return[this.values[0],this.values[1]]}get xyz(){return[this.values[0],this.values[1],this.values[2]]}get xyzw(){return[this.values[0],this.values[1],this.values[2],this.values[3]]}set x(t){this.values[0]=t}set y(t){this.values[1]=t}set z(t){this.values[2]=t}set w(t){this.values[3]=t}set xy(t){this.values[0]=t[0],this.values[1]=t[1]}set xyz(t){this.values[0]=t[0],this.values[1]=t[1],this.values[2]=t[2]}set xyzw(t){this.values[0]=t[0],this.values[1]=t[1],this.values[2]=t[2],this.values[3]=t[3]}at(t){return this.values[t]}reset(){for(let t=0;t<4;t++)this.values[t]=0}copy(t){t||(t=new h);for(let s=0;s<4;s++)t.values[s]=this.values[s];return t}roll(){const t=this.x,s=this.y,e=this.z,i=this.w;return Math.atan2(2*(t*s+i*e),i*i+t*t-s*s-e*e)}pitch(){const t=this.x,s=this.y,e=this.z,i=this.w;return Math.atan2(2*(s*e+i*t),i*i-t*t-s*s+e*e)}yaw(){return Math.asin(2*(this.x*this.z-this.w*this.y))}equals(t,s=1e-5){for(let e=0;e<4;e++)if(Math.abs(this.values[e]-t.at(e))>s)return!1;return!0}setIdentity(){return this.x=0,this.y=0,this.z=0,this.w=1,this}calculateW(){const t=this.x,s=this.y,e=this.z;return this.w=-Math.sqrt(Math.abs(1-t*t-s*s-e*e)),this}inverse(){const t=h.dot(this,this);if(!t)return this.xyzw=[0,0,0,0],this;const s=t?1/t:0;return this.x*=-s,this.y*=-s,this.z*=-s,this.w*=s,this}conjugate(){return this.values[0]*=-1,this.values[1]*=-1,this.values[2]*=-1,this}length(){const t=this.x,s=this.y,e=this.z,i=this.w;return Math.sqrt(t*t+s*s+e*e+i*i)}normalize(t){t||(t=this);const s=this.x,e=this.y,i=this.z,a=this.w;let u=Math.sqrt(s*s+e*e+i*i+a*a);return u?(u=1/u,t.x=s*u,t.y=e*u,t.z=i*u,t.w=a*u,t):(t.x=0,t.y=0,t.z=0,t.w=0,t)}add(t){for(let s=0;s<4;s++)this.values[s]+=t.at(s);return this}multiply(t){const s=this.values[0],e=this.values[1],i=this.values[2],a=this.values[3],u=t.x,h=t.y,l=t.z,r=t.w;return this.x=s*r+a*u+e*l-i*h,this.y=e*r+a*h+i*u-s*l,this.z=i*r+a*l+s*h-e*u,this.w=a*r-s*u-e*h-i*l,this}multiplyVec3(t,s){s||(s=new l);const e=t.x,i=t.y,a=t.z,u=this.x,h=this.y,r=this.z,v=this.w,n=v*e+h*a-r*i,y=v*i+r*e-u*a,x=v*a+u*i-h*e,o=-u*e-h*i-r*a;return s.x=n*v+o*-u+y*-r-x*-h,s.y=y*v+o*-h+x*-u-n*-r,s.z=x*v+o*-r+n*-h-y*-u,s}toMat3(t){t||(t=new u);const s=this.x,e=this.y,i=this.z,a=this.w,h=s+s,l=e+e,r=i+i,v=s*h,n=s*l,y=s*r,x=e*l,o=e*r,c=i*r,z=a*h,w=a*l,d=a*r;return t.init([1-(x+c),n+d,y-w,n-d,1-(v+c),o+z,y+w,o-z,1-(v+x)]),t}toMat4(t){t||(t=new a);const s=this.x,e=this.y,i=this.z,u=this.w,h=s+s,l=e+e,r=i+i,v=s*h,n=s*l,y=s*r,x=e*l,o=e*r,c=i*r,z=u*h,w=u*l,d=u*r;return t.init([1-(x+c),n+d,y-w,0,n-d,1-(v+c),o+z,0,y+w,o-z,1-(v+x),0,0,0,0,1]),t}static dot(t,s){return t.x*s.x+t.y*s.y+t.z*s.z+t.w*s.w}static sum(t,s,e){return e||(e=new h),e.x=t.x+s.x,e.y=t.y+s.y,e.z=t.z+s.z,e.w=t.w+s.w,e}static product(t,s,e){e||(e=new h);const i=t.x,a=t.y,u=t.z,l=t.w,r=s.x,v=s.y,n=s.z,y=s.w;return e.x=i*y+l*r+a*n-u*v,e.y=a*y+l*v+u*r-i*n,e.z=u*y+l*n+i*v-a*r,e.w=l*y-i*r-a*v-u*n,e}static cross(t,s,e){e||(e=new h);const i=t.x,a=t.y,u=t.z,l=t.w,r=s.x,v=s.y,n=s.z,y=s.w;return e.x=l*n+u*y+i*v-a*r,e.y=l*y-i*r-a*v-u*n,e.z=l*r+i*y+a*n-u*v,e.w=l*v+a*y+u*r-i*n,e}static shortMix(t,s,e,i){if(i||(i=new h),e<=0)return i.xyzw=t.xyzw,i;if(e>=1)return i.xyzw=s.xyzw,i;let a=h.dot(t,s);const u=s.copy();let l,r;if(a<0&&(u.inverse(),a=-a),a>.9999)l=1-e,r=0+e;else{const t=Math.sqrt(1-a*a),s=Math.atan2(t,a),i=1/t;l=Math.sin((1-e)*s)*i,r=Math.sin((0+e)*s)*i}return i.x=l*t.x+r*u.x,i.y=l*t.y+r*u.y,i.z=l*t.z+r*u.z,i.w=l*t.w+r*u.w,i}static mix(t,s,e,i){i||(i=new h);const a=t.x*s.x+t.y*s.y+t.z*s.z+t.w*s.w;if(Math.abs(a)>=1)return i.xyzw=t.xyzw,i;const u=Math.acos(a),l=Math.sqrt(1-a*a);if(Math.abs(l)<.001)return i.x=.5*t.x+.5*s.x,i.y=.5*t.y+.5*s.y,i.z=.5*t.z+.5*s.z,i.w=.5*t.w+.5*s.w,i;const r=Math.sin((1-e)*u)/l,v=Math.sin(e*u)/l;return i.x=t.x*r+s.x*v,i.y=t.y*r+s.y*v,i.z=t.z*r+s.z*v,i.w=t.w*r+s.w*v,i}static fromAxisAngle(t,s,e){e||(e=new h),s*=.5;const i=Math.sin(s);return e.x=t.x*i,e.y=t.y*i,e.z=t.z*i,e.w=Math.cos(s),e}}h.identity=(new h).setIdentity();class l{constructor(t){this.values=new Float32Array(3),void 0!==t&&(this.xyz=t)}get x(){return this.values[0]}get y(){return this.values[1]}get z(){return this.values[2]}get xy(){return[this.values[0],this.values[1]]}get xyz(){return[this.values[0],this.values[1],this.values[2]]}set x(t){this.values[0]=t}set y(t){this.values[1]=t}set z(t){this.values[2]=t}set xy(t){this.values[0]=t[0],this.values[1]=t[1]}set xyz(t){this.values[0]=t[0],this.values[1]=t[1],this.values[2]=t[2]}at(t){return this.values[t]}reset(){this.x=0,this.y=0,this.z=0}copy(t){return t||(t=new l),t.x=this.x,t.y=this.y,t.z=this.z,t}negate(t){return t||(t=this),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}equals(t,s=1e-5){return!(Math.abs(this.x-t.x)>s)&&(!(Math.abs(this.y-t.y)>s)&&!(Math.abs(this.z-t.z)>s))}length(){return Math.sqrt(this.squaredLength())}squaredLength(){const t=this.x,s=this.y,e=this.z;return t*t+s*s+e*e}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}subtract(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}scale(t,s){return s||(s=this),s.x*=t,s.y*=t,s.z*=t,s}normalize(t){t||(t=this);let s=this.length();return 1===s?this:0===s?(t.x=0,t.y=0,t.z=0,t):(s=1/s,t.x*=s,t.y*=s,t.z*=s,t)}multiplyByMat3(t,s){return s||(s=this),t.multiplyVec3(this,s)}multiplyByQuat(t,s){return s||(s=this),t.multiplyVec3(this,s)}toQuat(t){t||(t=new h);const s=new l,e=new l;return s.x=Math.cos(.5*this.x),e.x=Math.sin(.5*this.x),s.y=Math.cos(.5*this.y),e.y=Math.sin(.5*this.y),s.z=Math.cos(.5*this.z),e.z=Math.sin(.5*this.z),t.x=e.x*s.y*s.z-s.x*e.y*e.z,t.y=s.x*e.y*s.z+e.x*s.y*e.z,t.z=s.x*s.y*e.z-e.x*e.y*s.z,t.w=s.x*s.y*s.z+e.x*e.y*e.z,t}static cross(t,s,e){e||(e=new l);const i=t.x,a=t.y,u=t.z,h=s.x,r=s.y,v=s.z;return e.x=a*v-u*r,e.y=u*h-i*v,e.z=i*r-a*h,e}static dot(t,s){const e=t.x,i=t.y,a=t.z;return e*s.x+i*s.y+a*s.z}static distance(t,s){s.x,t.x,s.y,t.y,s.z,t.z;return Math.sqrt(this.squaredDistance(t,s))}static squaredDistance(t,s){const e=s.x-t.x,i=s.y-t.y,a=s.z-t.z;return e*e+i*i+a*a}static direction(t,s,e){e||(e=new l);const i=t.x-s.x,a=t.y-s.y,u=t.z-s.z;let h=Math.sqrt(i*i+a*a+u*u);return 0===h?(e.x=0,e.y=0,e.z=0,e):(h=1/h,e.x=i*h,e.y=a*h,e.z=u*h,e)}static mix(t,s,e,i){return i||(i=new l),i.x=t.x+e*(s.x-t.x),i.y=t.y+e*(s.y-t.y),i.z=t.z+e*(s.z-t.z),i}static sum(t,s,e){return e||(e=new l),e.x=t.x+s.x,e.y=t.y+s.y,e.z=t.z+s.z,e}static difference(t,s,e){return e||(e=new l),e.x=t.x-s.x,e.y=t.y-s.y,e.z=t.z-s.z,e}static product(t,s,e){return e||(e=new l),e.x=t.x*s.x,e.y=t.y*s.y,e.z=t.z*s.z,e}static quotient(t,s,e){return e||(e=new l),e.x=t.x/s.x,e.y=t.y/s.y,e.z=t.z/s.z,e}}l.zero=new l([0,0,0]),l.one=new l([1,1,1]),l.up=new l([0,1,0]),l.right=new l([1,0,0]),l.forward=new l([0,0,1]);class r{constructor(t){this.values=new Float32Array(2),void 0!==t&&(this.xy=t)}get x(){return this.values[0]}get y(){return this.values[1]}get xy(){return[this.values[0],this.values[1]]}set x(t){this.values[0]=t}set y(t){this.values[1]=t}set xy(t){this.values[0]=t[0],this.values[1]=t[1]}at(t){return this.values[t]}reset(){this.x=0,this.y=0}copy(t){return t||(t=new r),t.x=this.x,t.y=this.y,t}negate(t){return t||(t=this),t.x=-this.x,t.y=-this.y,t}equals(t,s=1e-5){return!(Math.abs(this.x-t.x)>s)&&!(Math.abs(this.y-t.y)>s)}length(){return Math.sqrt(this.squaredLength())}squaredLength(){const t=this.x,s=this.y;return t*t+s*s}add(t){return this.x+=t.x,this.y+=t.y,this}subtract(t){return this.x-=t.x,this.y-=t.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}divide(t){return this.x/=t.x,this.y/=t.y,this}scale(t,s){return s||(s=this),s.x*=t,s.y*=t,s}normalize(t){t||(t=this);let s=this.length();return 1===s?this:0===s?(t.x=0,t.y=0,t):(s=1/s,t.x*=s,t.y*=s,t)}multiplyMat2(t,s){return s||(s=this),t.multiplyVec2(this,s)}multiplyMat3(t,s){return s||(s=this),t.multiplyVec2(this,s)}static cross(t,s,e){e||(e=new l);const i=t.x,a=t.y,u=s.x,h=i*s.y-a*u;return e.x=0,e.y=0,e.z=h,e}static dot(t,s){return t.x*s.x+t.y*s.y}static distance(t,s){return Math.sqrt(this.squaredDistance(t,s))}static squaredDistance(t,s){const e=s.x-t.x,i=s.y-t.y;return e*e+i*i}static direction(t,s,e){e||(e=new r);const i=t.x-s.x,a=t.y-s.y;let u=Math.sqrt(i*i+a*a);return 0===u?(e.x=0,e.y=0,e):(u=1/u,e.x=i*u,e.y=a*u,e)}static mix(t,s,e,i){i||(i=new r);const a=t.x,u=t.y,h=s.x,l=s.y;return i.x=a+e*(h-a),i.y=u+e*(l-u),i}static sum(t,s,e){return e||(e=new r),e.x=t.x+s.x,e.y=t.y+s.y,e}static difference(t,s,e){return e||(e=new r),e.x=t.x-s.x,e.y=t.y-s.y,e}static product(t,s,e){return e||(e=new r),e.x=t.x*s.x,e.y=t.y*s.y,e}static quotient(t,s,e){return e||(e=new r),e.x=t.x/s.x,e.y=t.y/s.y,e}}r.zero=new r([0,0]),r.one=new r([1,1]);class v{constructor(t){this.values=new Float32Array(4),void 0!==t&&this.init(t)}at(t){return this.values[t]}init(t){for(let s=0;s<4;s++)this.values[s]=t[s];return this}reset(){for(let t=0;t<4;t++)this.values[t]=0}copy(t){t||(t=new v);for(let s=0;s<4;s++)t.values[s]=this.values[s];return t}all(){const t=[];for(let s=0;s<4;s++)t[s]=this.values[s];return t}row(t){return[this.values[2*t+0],this.values[2*t+1]]}col(t){return[this.values[t],this.values[t+2]]}equals(t,s=1e-5){for(let e=0;e<4;e++)if(Math.abs(this.values[e]-t.at(e))>s)return!1;return!0}determinant(){return this.values[0]*this.values[3]-this.values[2]*this.values[1]}setIdentity(){return this.values[0]=1,this.values[1]=0,this.values[2]=0,this.values[3]=1,this}transpose(){const t=this.values[1];return this.values[1]=this.values[2],this.values[2]=t,this}inverse(){let t=this.determinant();if(!t)throw new Error("Can\t inverse this matrix as its determinant is 0");t=1/t;const s=this.values[0];return this.values[0]=t*this.values[3],this.values[1]=t*-this.values[1],this.values[2]=t*-this.values[2],this.values[3]=t*s,this}multiply(t){const s=this.values[0],e=this.values[1],i=this.values[2],a=this.values[3];return this.values[0]=s*t.at(0)+e*t.at(2),this.values[1]=s*t.at(1)+e*t.at(3),this.values[2]=i*t.at(0)+a*t.at(2),this.values[3]=i*t.at(1)+a*t.at(3),this}rotate(t){const s=this.values[0],e=this.values[1],i=this.values[2],a=this.values[3],u=Math.sin(t),h=Math.cos(t);return this.values[0]=s*h+e*u,this.values[1]=s*-u+e*h,this.values[2]=i*h+a*u,this.values[3]=i*-u+a*h,this}multiplyVec2(t,s){const e=t.x,i=t.y;return s?(s.xy=[e*this.values[0]+i*this.values[1],e*this.values[2]+i*this.values[3]],s):new r([e*this.values[0]+i*this.values[1],e*this.values[2]+i*this.values[3]])}scale(t){const s=this.values[0],e=this.values[1],i=this.values[2],a=this.values[3],u=t.x,h=t.y;return this.values[0]=s*u,this.values[1]=e*h,this.values[2]=i*u,this.values[3]=a*h,this}static product(t,s,e){const i=t.at(0),a=t.at(1),u=t.at(2),h=t.at(3);return e?(e.init([i*s.at(0)+a*s.at(2),i*s.at(1)+a*s.at(3),u*s.at(0)+h*s.at(2),u*s.at(1)+h*s.at(3)]),e):new v([i*s.at(0)+a*s.at(2),i*s.at(1)+a*s.at(3),u*s.at(0)+h*s.at(2),u*s.at(1)+h*s.at(3)])}}v.identity=(new v).setIdentity(),e.d(s,"vec2",(function(){return r})),e.d(s,"vec3",(function(){return l})),e.d(s,"vec4",(function(){return i})),e.d(s,"mat2",(function(){return v})),e.d(s,"mat3",(function(){return u})),e.d(s,"mat4",(function(){return a})),e.d(s,"quat",(function(){return h}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,