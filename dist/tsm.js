var tsm=function(t){var s={};function e(r){if(s[r])return s[r].exports;var i=s[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=s,e.d=function(t,s,r){e.o(t,s)||Object.defineProperty(t,s,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,s){if(1&s&&(t=e(t)),8&s)return t;if(4&s&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&s&&"string"!=typeof t)for(var i in t)e.d(r,i,function(s){return t[s]}.bind(null,i));return r},e.n=function(t){var s=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(s,"a",s),s},e.o=function(t,s){return Object.prototype.hasOwnProperty.call(t,s)},e.p="",e(e.s=0)}([function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});const r=e(1);s.Matrix=r.default;const i=e(2);s.Quat=i.default;const n=e(4);s.Vector=n.default},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});class r{constructor(t,s,e){this._rows=t,this._columns=s,this._values=new Array(t).fill([]).map(()=>new Array(s).fill(0)),e&&(this.values=e)}get rows(){return this._rows}get columns(){return this._columns}get values(){return this._values}set values(t){const s=Math.min(t.length,this.rows),e=Math.min(t[0].length,this.columns);for(let r=0;r<s;r++)for(let s=0;s<e;s++)this.values[r][s]=t[r][s]}at(t,s){return this.values[t][s]}reset(){this.values=this.values.map(t=>t.map(()=>0))}addAColumn(){return new r(this.rows,this.columns+1,this.values)}addARow(){return new r(this.rows+1,this.columns,this.values)}equals(t){return this.rows===t.rows&&this.columns===t.columns&&this.values.reduce((s,e,r)=>s&&e.reduce((s,e,i)=>s&&t.at(r,i)===e,s),!0)}setAsIdentity(){if(this.rows!==this.columns)throw new Error("The matrix isn't squared!");return this.values.forEach((t,s)=>{t.forEach((t,e)=>{this.values[s][e]=s===e?1:0})}),this}static identity(t){if(t<1)throw Error("Matrix dimension must be positive.");return new r(t,t).setAsIdentity()}multiply(t){if(this.columns!==t.rows)throw new Error("The operand matrix must have the same number of rows as 'this' matrix columns!");const s=new r(this.rows,t.columns);return s.values=s.values.map((s,e)=>s.map((s,r)=>this.values[e].reduce((s,e,i)=>s+e*t.at(i,r),0))),s}determinant(){if(this.rows!==this.columns)throw new Error("The matrix isn't squared!");let t=0,s=1;if(2===this.rows)t=this.values[0][0]*this.values[1][1]-this.values[1][0]*this.values[0][1];else for(let e=0;e<this.rows;e++){const r=this.getCofactor(0,e);t+=s*this.at(0,e)*r.determinant(),s=-s}return t}getCofactor(t,s){return new r(this.rows-1,this.columns-1,this.values.filter((s,e)=>e!==t).map(t=>t.filter((t,e)=>e!==s)))}transpose(){return new r(this.columns,this.rows,new Array(this.columns).fill([]).map((t,s)=>new Array(this.rows).fill(0).map((t,e)=>this.at(e,s))))}inverse(){if(this.rows!==this.columns)throw new Error("The matrix isn't squared!");const t=this.determinant();if(0===t)throw new Error("Determinant is 0, can't compute inverse.");let s=-1;const e=new r(this.rows,this.columns,this.values.map((t,e)=>t.map((t,r)=>(s*=-1,s*this.getCofactor(e,r).determinant())))).transpose();return new r(this.rows,this.columns,this.values.map((s,r)=>s.map((s,i)=>e.at(r,i)/t)))}}s.default=r},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});const r=e(3);class i{constructor(t){this.values=new Float32Array(4),void 0!==t&&(this.xyzw=t)}get x(){return this.values[0]}get y(){return this.values[1]}get z(){return this.values[2]}get w(){return this.values[3]}get xy(){return[this.values[0],this.values[1]]}get xyz(){return[this.values[0],this.values[1],this.values[2]]}get xyzw(){return[this.values[0],this.values[1],this.values[2],this.values[3]]}set x(t){this.values[0]=t}set y(t){this.values[1]=t}set z(t){this.values[2]=t}set w(t){this.values[3]=t}set xy(t){this.values[0]=t[0],this.values[1]=t[1]}set xyz(t){this.values[0]=t[0],this.values[1]=t[1],this.values[2]=t[2]}set xyzw(t){this.values[0]=t[0],this.values[1]=t[1],this.values[2]=t[2],this.values[3]=t[3]}at(t){return this.values[t]}reset(){for(let t=0;t<4;t++)this.values[t]=0}copy(t){t||(t=new i);for(let s=0;s<4;s++)t.values[s]=this.values[s];return t}roll(){const t=this.x,s=this.y,e=this.z,r=this.w;return Math.atan2(2*(t*s+r*e),r*r+t*t-s*s-e*e)}pitch(){const t=this.x,s=this.y,e=this.z,r=this.w;return Math.atan2(2*(s*e+r*t),r*r-t*t-s*s+e*e)}yaw(){return Math.asin(2*(this.x*this.z-this.w*this.y))}equals(t,s=r.EPSILON){for(let e=0;e<4;e++)if(Math.abs(this.values[e]-t.at(e))>s)return!1;return!0}setIdentity(){return this.x=0,this.y=0,this.z=0,this.w=1,this}calculateW(){const t=this.x,s=this.y,e=this.z;return this.w=-Math.sqrt(Math.abs(1-t*t-s*s-e*e)),this}inverse(){const t=i.dot(this,this);if(!t)return this.xyzw=[0,0,0,0],this;const s=t?1/t:0;return this.x*=-s,this.y*=-s,this.z*=-s,this.w*=s,this}conjugate(){return this.values[0]*=-1,this.values[1]*=-1,this.values[2]*=-1,this}length(){const t=this.x,s=this.y,e=this.z,r=this.w;return Math.sqrt(t*t+s*s+e*e+r*r)}normalize(t){t||(t=this);const s=this.x,e=this.y,r=this.z,i=this.w;let n=Math.sqrt(s*s+e*e+r*r+i*i);return n?(n=1/n,t.x=s*n,t.y=e*n,t.z=r*n,t.w=i*n,t):(t.x=0,t.y=0,t.z=0,t.w=0,t)}add(t){for(let s=0;s<4;s++)this.values[s]+=t.at(s);return this}multiply(t){const s=this.values[0],e=this.values[1],r=this.values[2],i=this.values[3],n=t.x,a=t.y,u=t.z,h=t.w;return this.x=s*h+i*n+e*u-r*a,this.y=e*h+i*a+r*n-s*u,this.z=r*h+i*u+s*a-e*n,this.w=i*h-s*n-e*a-r*u,this}static dot(t,s){return t.x*s.x+t.y*s.y+t.z*s.z+t.w*s.w}static sum(t,s){const e=new i;return e.x=t.x+s.x,e.y=t.y+s.y,e.z=t.z+s.z,e.w=t.w+s.w,e}static product(t,s){const e=new i,r=t.x,n=t.y,a=t.z,u=t.w,h=s.x,o=s.y,l=s.z,w=s.w;return e.x=r*w+u*h+n*l-a*o,e.y=n*w+u*o+a*h-r*l,e.z=a*w+u*l+r*o-n*h,e.w=u*w-r*h-n*o-a*l,e}static cross(t,s){const e=new i,r=t.x,n=t.y,a=t.z,u=t.w,h=s.x,o=s.y,l=s.z,w=s.w;return e.x=u*l+a*w+r*o-n*h,e.y=u*w-r*h-n*o-a*l,e.z=u*h+r*w+n*l-a*o,e.w=u*o+n*w+a*h-r*l,e}static shortMix(t,s,e){const r=new i;if(e<=0)return r.xyzw=t.xyzw,r;if(e>=1)return r.xyzw=s.xyzw,r;let n=i.dot(t,s);const a=s.copy();let u,h;if(n<0&&(a.inverse(),n=-n),n>.9999)u=1-e,h=0+e;else{const t=Math.sqrt(1-n*n),s=Math.atan2(t,n),r=1/t;u=Math.sin((1-e)*s)*r,h=Math.sin((0+e)*s)*r}return r.x=u*t.x+h*a.x,r.y=u*t.y+h*a.y,r.z=u*t.z+h*a.z,r.w=u*t.w+h*a.w,r}static mix(t,s,e){const r=new i,n=t.x*s.x+t.y*s.y+t.z*s.z+t.w*s.w;if(Math.abs(n)>=1)return r.xyzw=t.xyzw,r;const a=Math.acos(n),u=Math.sqrt(1-n*n);if(Math.abs(u)<.001)return r.x=.5*t.x+.5*s.x,r.y=.5*t.y+.5*s.y,r.z=.5*t.z+.5*s.z,r.w=.5*t.w+.5*s.w,r;const h=Math.sin((1-e)*a)/u,o=Math.sin(e*a)/u;return r.x=t.x*h+s.x*o,r.y=t.y*h+s.y*o,r.z=t.z*h+s.z*o,r.w=t.w*h+s.w*o,r}static fromAxisAngle(t,s){if(3!==t.rows)throw new Error("The axis vector must be in 3D!");const e=new i;s*=.5;const r=Math.sin(s);return e.x=t.at(0)*r,e.y=t.at(1)*r,e.z=t.at(2)*r,e.w=Math.cos(s),e}}s.default=i,i.identity=(new i).setIdentity()},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0}),s.EPSILON=1e-5},function(t,s,e){"use strict";Object.defineProperty(s,"__esModule",{value:!0});class r{constructor(t,s){this._rows=t,this._values=new Array(t).fill(0),s&&(this.values=s)}get rows(){return this._rows}get values(){return this._values}set values(t){const s=Math.min(this.values.length,t.length);for(let e=0;e<s;e++)this.values[e]=t[e]}at(t){return this.values[t]}reset(){this.values=this.values.fill(0)}addAValue(){return new r(this.rows+1,this.values)}equals(t){return this.rows===t.rows&&this.values.reduce((s,e,r)=>s&&t.at(r)===e,!0)}negate(){return new r(this.rows,this.values.map(t=>-t))}length(){return Math.sqrt(this.squaredLength())}squaredLength(){return this.dot(this)}add(t){if(this.rows!==t.rows)throw new Error("Vectors don't have the same dimension!");return this.operateOnAllValues((s,e)=>s+t.at(e))}substract(t){if(this.rows!==t.rows)throw new Error("Vectors don't have the same dimension!");return this.operateOnAllValues((s,e)=>s-t.at(e))}multiply(t){if(this.rows!==t.rows)throw new Error("Vectors don't have the same dimension!");return this.operateOnAllValues((s,e)=>s*t.at(e))}divide(t){if(this.rows!==t.rows)throw new Error("Vectors don't have the same dimension!");return this.operateOnAllValues((s,e)=>s/t.at(e))}scale(t){return this.operateOnAllValues(s=>s*t)}operateOnAllValues(t){return new r(this.rows,this.values.map(t))}normalize(){const t=this.length();return new r(this.rows,this.values.map(s=>s/t))}dot(t){return this.values.reduce((s,e,r)=>s+e*t.at(r),0)}cross(t){const s=new Array(3);return s[0]=this.at(1)*t.at(2)-this.at(2)*t.at(1),s[1]=this.at(2)*t.at(0)-this.at(0)*t.at(2),s[2]=this.at(0)*t.at(1)-this.at(1)*t.at(0),new r(3,s)}mix(t,s){return new r(this.rows,this.values.map((e,r)=>e+s*(t.at(r)-e)))}}s.default=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90c20vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdHNtLy4vc3JjL3RzbS50cyIsIndlYnBhY2s6Ly90c20vLi9zcmMvTWF0cml4LnRzIiwid2VicGFjazovL3RzbS8uL3NyYy9RdWF0LnRzIiwid2VicGFjazovL3RzbS8uL3NyYy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vdHNtLy4vc3JjL1ZlY3Rvci50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIk1hdHJpeF8xIiwiTWF0cml4IiwiZGVmYXVsdCIsIlF1YXRfMSIsIlF1YXQiLCJWZWN0b3JfMSIsIlZlY3RvciIsInJvd3MiLCJjb2x1bW5zIiwidmFsdWVzIiwidGhpcyIsIl9yb3dzIiwiX2NvbHVtbnMiLCJfdmFsdWVzIiwiQXJyYXkiLCJmaWxsIiwibWFwIiwibmV3VmFsdWVzIiwibWluUm93IiwiTWF0aCIsIm1pbiIsImxlbmd0aCIsIm1pbkNvbCIsInJvdyIsImNvbCIsIm1hdCIsInJlZHVjZSIsImVxbCIsImVxbDIiLCJ2YWwiLCJqIiwiYXQiLCJFcnJvciIsImZvckVhY2giLCJkaW1lbnNpb24iLCJzZXRBc0lkZW50aXR5IiwicmVzTWF0cml4Iiwic3VtIiwiZWxtIiwiayIsImRldCIsInNpZ24iLCJtaW5vciIsImdldENvZmFjdG9yIiwiZGV0ZXJtaW5hbnQiLCJmaWx0ZXIiLCJ2IiwidHJhbnNwb3NlZENvZmFjdG9yIiwidHJhbnNwb3NlIiwiY29uc3RhbnRzXzEiLCJGbG9hdDMyQXJyYXkiLCJ1bmRlZmluZWQiLCJ4eXp3IiwiaW5kZXgiLCJkZXN0IiwieCIsInkiLCJ6IiwidyIsImF0YW4yIiwiYXNpbiIsInZlY3RvciIsInRocmVzaG9sZCIsIkVQU0lMT04iLCJhYnMiLCJzcXJ0IiwiZG90IiwiaW52RG90Iiwib3RoZXIiLCJxMXgiLCJxMXkiLCJxMXoiLCJxMXciLCJxMngiLCJxMnkiLCJxMnoiLCJxMnciLCJxMSIsInEyIiwidGltZSIsImNvcyIsInEyYSIsImNvcHkiLCJrMCIsImsxIiwiaW52ZXJzZSIsInNpbiIsImFuZ2xlIiwib25lT3ZlclNpbiIsImNvc0hhbGZUaGV0YSIsImhhbGZUaGV0YSIsImFjb3MiLCJzaW5IYWxmVGhldGEiLCJyYXRpb0EiLCJyYXRpb0IiLCJheGlzIiwiaWRlbnRpdHkiLCJzZXRJZGVudGl0eSIsIm1pblNpemUiLCJ2ZWMiLCJzcXVhcmVkTGVuZ3RoIiwib3BlcmF0ZU9uQWxsVmFsdWVzIiwic2NhbGUiLCJvcGVyYXRpb24iLCJ2ZWN0b3JMZW5ndGgiLCJyZXMiLCJjcm9zc1ZhbHVlcyJdLCJtYXBwaW5ncyI6Im9CQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQTBEZixPQXJEQUYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1D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QixFQUFPLEVBQUdvRyxHQUV6QixJQUFJN0MsRUFBUWtCLEdBQ1IsT0FBTyxJQUFJekUsRUFBT0ksS0FBS0gsS0FBTUcsS0FBS0QsT0FBT08sSUFBSSxDQUFDYSxFQUFLN0QsSUFBTTZELEVBQU1rRCxHQUFRbEIsRUFBTzlCLEdBQUcvRCxHQUFLNkQsTUFHOUYvRCxFQUFRb0MsUUFBVUkiLCJmaWxlIjoidHNtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDEyLCAyMDE4IE1hdHRoaWFzIEZlcmNoXG4gKlxuICogUHJvamVjdCBob21lcGFnZTogaHR0cHM6Ly9naXRodWIuY29tL21hdHRoaWFzZmVyY2gvdHNtXG4gKlxuICogVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbiAqIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuICogYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbiAqIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbiAqIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbiAqXG4gKiAgICAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuICogICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbiAqICAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuICogICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbiAqXG4gKiAgICAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdFxuICogICAgYmUgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuICpcbiAqICAgIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZVxuICogICAgZGlzdHJpYnV0aW9uLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBNYXRyaXhfMSA9IHJlcXVpcmUoXCIuL01hdHJpeFwiKTtcbmV4cG9ydHMuTWF0cml4ID0gTWF0cml4XzEuZGVmYXVsdDtcbmNvbnN0IFF1YXRfMSA9IHJlcXVpcmUoXCIuL1F1YXRcIik7XG5leHBvcnRzLlF1YXQgPSBRdWF0XzEuZGVmYXVsdDtcbmNvbnN0IFZlY3Rvcl8xID0gcmVxdWlyZShcIi4vVmVjdG9yXCIpO1xuZXhwb3J0cy5WZWN0b3IgPSBWZWN0b3JfMS5kZWZhdWx0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBNYXRyaXgge1xuICAgIGNvbnN0cnVjdG9yKHJvd3MsIGNvbHVtbnMsIHZhbHVlcykge1xuICAgICAgICB0aGlzLl9yb3dzID0gcm93cztcbiAgICAgICAgdGhpcy5fY29sdW1ucyA9IGNvbHVtbnM7XG4gICAgICAgIC8vIENyZWF0ZSBtYXRyaXggZmlsbGVkIHdpdGggMCBieSBkZWZhdWx0XG4gICAgICAgIHRoaXMuX3ZhbHVlcyA9IG5ldyBBcnJheShyb3dzKS5maWxsKFtdKS5tYXAoKCkgPT4gbmV3IEFycmF5KGNvbHVtbnMpLmZpbGwoMCkpO1xuICAgICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgcm93cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jvd3M7XG4gICAgfVxuICAgIGdldCBjb2x1bW5zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29sdW1ucztcbiAgICB9XG4gICAgZ2V0IHZhbHVlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHZhbHVlcyBpbnRvIHRoZSBtYXRyaXguXG4gICAgICogSWYgdGhlIHBhcmFtZXRlcnMgbWF0cml4IGlzIHRvIHdpZGUsIHRoZSB2YWx1ZXMgYXJlIGNyb3BwZWQgdG8gdGhlIGN1cnJlbnQgbWF0cml4IHNpemUuXG4gICAgICogSXQgdGhlIHBhcmFtZXRlcnMgbWF0cml4IGlzIHRvIHNtYWxsLCByZW1haW5pbmcgY2VsbHMgd2lsbCBiZSBmaWxsZWQgd2l0aCAwLlxuICAgICAqIEBwYXJhbSBuZXdWYWx1ZXMgQXJyYXlzIG9mIG5ldyB2YWx1ZXMuXG4gICAgICovXG4gICAgc2V0IHZhbHVlcyhuZXdWYWx1ZXMpIHtcbiAgICAgICAgY29uc3QgbWluUm93ID0gTWF0aC5taW4obmV3VmFsdWVzLmxlbmd0aCwgdGhpcy5yb3dzKTtcbiAgICAgICAgY29uc3QgbWluQ29sID0gTWF0aC5taW4obmV3VmFsdWVzWzBdLmxlbmd0aCwgdGhpcy5jb2x1bW5zKTtcbiAgICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCBtaW5Sb3c7IHIrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBtaW5Db2w7IGMrKykge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzW3JdW2NdID0gbmV3VmFsdWVzW3JdW2NdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIG1hdHJpeCB2YWx1ZSwgZnJvbSBpdHMgcG9zaXRpb25cbiAgICAgKiBAcGFyYW0gcm93IE1hdHJpeCBsaW5lLCBmcm9tIDAgdG8gYHJvd3NgXG4gICAgICogQHBhcmFtIGNvbCBNYXRyaWMgY29sdW1uLCBmcm9tIDAgdG8gYGNvbHVtbnNgXG4gICAgICovXG4gICAgYXQocm93LCBjb2wpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzW3Jvd11bY29sXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhbGwgbWF0cml4IHZhbHVlcyB0byAwXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMudmFsdWVzID0gdGhpcy52YWx1ZXMubWFwKChyb3cpID0+IHJvdy5tYXAoKCkgPT4gMCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gbmV3IGNvbHVtbiB0byB0aGUgbWF0cml4LCBmaWxsZWQgd2l0aCAwXG4gICAgICovXG4gICAgYWRkQUNvbHVtbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgodGhpcy5yb3dzLCB0aGlzLmNvbHVtbnMgKyAxLCB0aGlzLnZhbHVlcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhbiBuZXcgcm93IHRvIHRoZSBtYXRyaXgsIGZpbGxlZCB3aXRoIDBcbiAgICAgKi9cbiAgICBhZGRBUm93KCkge1xuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeCh0aGlzLnJvd3MgKyAxLCB0aGlzLmNvbHVtbnMsIHRoaXMudmFsdWVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdHdvIG1hdHJpeCBhcmUgZXF1YWxzLCB2YWx1ZSBieSB2YWx1ZVxuICAgICAqIEBwYXJhbSBtYXQgVGhlIG1hdHJpeCBhZ2FpbnN0IHRvIGNoZWNrIGVxdWFsaXR5XG4gICAgICovXG4gICAgZXF1YWxzKG1hdCkge1xuICAgICAgICAvLyBSZWR1Y2Ugb24gcm93cyAtPiByZWR1Y2Ugb24gY29sdW1ucyAtPiBpZiBhIHZhbHVlICE9IHRoZW4gZmFsc2UhXG4gICAgICAgIHJldHVybiAodGhpcy5yb3dzID09PSBtYXQucm93cyAmJiB0aGlzLmNvbHVtbnMgPT09IG1hdC5jb2x1bW5zKVxuICAgICAgICAgICAgJiYgdGhpcy52YWx1ZXMucmVkdWNlKC8vIFJvd3NcbiAgICAgICAgICAgIChlcWwsIHJvdywgaSkgPT4gZXFsICYmIHJvdy5yZWR1Y2UoLy8gQ29sdW1ucyAocmVhbCB2YWx1ZXMpXG4gICAgICAgICAgICAoZXFsMiwgdmFsLCBqKSA9PiBlcWwyICYmIG1hdC5hdChpLCBqKSA9PT0gdmFsLCBlcWwpLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWF0cml4IGFzIGFuIGlkZW50aXR5IG1hdHJpeFxuICAgICAqL1xuICAgIHNldEFzSWRlbnRpdHkoKSB7XG4gICAgICAgIGlmICh0aGlzLnJvd3MgIT09IHRoaXMuY29sdW1ucylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBtYXRyaXggaXNuJ3Qgc3F1YXJlZCFcIik7XG4gICAgICAgIHRoaXMudmFsdWVzLmZvckVhY2goKHJvdywgaSkgPT4ge1xuICAgICAgICAgICAgcm93LmZvckVhY2goKGMsIGopID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc1tpXVtqXSA9IGkgPT09IGogPyAxIDogMDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYW4gaWRlbnRpdHkgbWF0cml4ICgxIG9uIGRpYWdvbmFsKVxuICAgICAqIEBwYXJhbSBkaW1lbnNpb24gRGltZW5zaW9uIG9mIHRoZSBzcXVhcmVkIG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBpZGVudGl0eShkaW1lbnNpb24pIHtcbiAgICAgICAgaWYgKGRpbWVuc2lvbiA8IDEpXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignTWF0cml4IGRpbWVuc2lvbiBtdXN0IGJlIHBvc2l0aXZlLicpO1xuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeChkaW1lbnNpb24sIGRpbWVuc2lvbikuc2V0QXNJZGVudGl0eSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgcHJvZHVjdCB3aXRoIGFub3RoZXIgbWF0cml4XG4gICAgICogQHBhcmFtIG1hdCBUaGUgc2Vjb25kIG9wZXJhbmQgbWF0cml4XG4gICAgICogQHRocm93cyBFcnJvciBpZiBtYXRyaXhBLmNvbHVtbnMgIT0gbWF0cml4Qi5yb3dzXG4gICAgICovXG4gICAgbXVsdGlwbHkobWF0KSB7XG4gICAgICAgIGlmICh0aGlzLmNvbHVtbnMgIT09IG1hdC5yb3dzKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIG9wZXJhbmQgbWF0cml4IG11c3QgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2Ygcm93cyBhcyAndGhpcycgbWF0cml4IGNvbHVtbnMhXCIpO1xuICAgICAgICBjb25zdCByZXNNYXRyaXggPSBuZXcgTWF0cml4KHRoaXMucm93cywgbWF0LmNvbHVtbnMpO1xuICAgICAgICByZXNNYXRyaXgudmFsdWVzID0gcmVzTWF0cml4LnZhbHVlcy5tYXAoKHJvdywgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJvdy5tYXAoKHZhbCwgaikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlc1tpXS5yZWR1Y2UoKHN1bSwgZWxtLCBrKSA9PiBzdW0gKyAoZWxtICogbWF0LmF0KGssIGopKSwgMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXNNYXRyaXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBkZXRlcm1pbmFudCBvZiB0aGUgbWF0cml4XG4gICAgICogQHRocm93cyBFcnJvciBpZiB0aGUgbWF0cml4IGlzIG5vdCBzcXVhcmVkXG4gICAgICovXG4gICAgZGV0ZXJtaW5hbnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnJvd3MgIT09IHRoaXMuY29sdW1ucylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBtYXRyaXggaXNuJ3Qgc3F1YXJlZCFcIik7XG4gICAgICAgIGxldCBkZXQgPSAwO1xuICAgICAgICBsZXQgc2lnbiA9IDE7XG4gICAgICAgIGlmICh0aGlzLnJvd3MgPT09IDIpIHtcbiAgICAgICAgICAgIGRldCA9IHRoaXMudmFsdWVzWzBdWzBdICogdGhpcy52YWx1ZXNbMV1bMV0gLSB0aGlzLnZhbHVlc1sxXVswXSAqIHRoaXMudmFsdWVzWzBdWzFdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbm9yID0gdGhpcy5nZXRDb2ZhY3RvcigwLCBpKTtcbiAgICAgICAgICAgICAgICBkZXQgKz0gc2lnbiAqIHRoaXMuYXQoMCwgaSkgKiBtaW5vci5kZXRlcm1pbmFudCgpO1xuICAgICAgICAgICAgICAgIHNpZ24gPSAtc2lnbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGV0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgY29mYWN0b3IgbWF0cml4XG4gICAgICogQHBhcmFtIHJvdyBUaGUgcm93IHRvIG9taXQgaW4gdGhlIG1hdHJpeFxuICAgICAqIEBwYXJhbSBjb2wgVGhlIGNvbHVtbiB0byBvbWl0IGluIHRoZSBtYXRyaXhcbiAgICAgKiBAcmV0dXJuIFRoZSBjb2ZhY3RvciBtYXRyaXggc2l6ZWQgKG4tMSl4KG4tMSlcbiAgICAgKi9cbiAgICBnZXRDb2ZhY3Rvcihyb3csIGNvbCkge1xuICAgICAgICByZXR1cm4gbmV3IE1hdHJpeCh0aGlzLnJvd3MgLSAxLCB0aGlzLmNvbHVtbnMgLSAxLCB0aGlzLnZhbHVlc1xuICAgICAgICAgICAgLmZpbHRlcigodiwgaSkgPT4gaSAhPT0gcm93KSAvLyBSZW1vdmUgdGhlIHVubmVjZXNzYXJ5IHJvd1xuICAgICAgICAgICAgLm1hcCgoYykgPT4gYy5maWx0ZXIoKHYsIGkpID0+IGkgIT09IGNvbCkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYSB0cmFuc3Bvc2VkIHRoZSBtYXRyaXhcbiAgICAgKiBAcmV0dXJuIEEgbmV3IG1hdHJpeCBzaXplZCAoY29sdW1ucykgeCAocm93cylcbiAgICAgKi9cbiAgICB0cmFuc3Bvc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWF0cml4KHRoaXMuY29sdW1ucywgdGhpcy5yb3dzLCBuZXcgQXJyYXkodGhpcy5jb2x1bW5zKS5maWxsKFtdKVxuICAgICAgICAgICAgLm1hcCgocm93LCBpKSA9PiBuZXcgQXJyYXkodGhpcy5yb3dzKS5maWxsKDApLm1hcCgoYywgaikgPT4gdGhpcy5hdChqLCBpKSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIGludmVyc2VkIG1hdHJpeFxuICAgICAqIEByZXR1cm4gQSBuZXcgbWF0cml4IGludmVyc2VkXG4gICAgICovXG4gICAgaW52ZXJzZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucm93cyAhPT0gdGhpcy5jb2x1bW5zKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIG1hdHJpeCBpc24ndCBzcXVhcmVkIVwiKTtcbiAgICAgICAgY29uc3QgZGV0ID0gdGhpcy5kZXRlcm1pbmFudCgpO1xuICAgICAgICBpZiAoZGV0ID09PSAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGV0ZXJtaW5hbnQgaXMgMCwgY2FuJ3QgY29tcHV0ZSBpbnZlcnNlLlwiKTtcbiAgICAgICAgLy8gR2V0IGNvZmFjdG9yIG1hdHJpeFxuICAgICAgICBsZXQgc2lnbiA9IC0xO1xuICAgICAgICBjb25zdCBjb2ZhY3RvciA9IG5ldyBNYXRyaXgodGhpcy5yb3dzLCB0aGlzLmNvbHVtbnMsIHRoaXMudmFsdWVzLm1hcCgocm93LCBpKSA9PiByb3cubWFwKCh2YWwsIGopID0+IHtcbiAgICAgICAgICAgIHNpZ24gKj0gLTE7XG4gICAgICAgICAgICByZXR1cm4gc2lnbiAqIHRoaXMuZ2V0Q29mYWN0b3IoaSwgaikuZGV0ZXJtaW5hbnQoKTtcbiAgICAgICAgfSkpKTtcbiAgICAgICAgLy8gVHJhbnNwb3NlIGl0XG4gICAgICAgIGNvbnN0IHRyYW5zcG9zZWRDb2ZhY3RvciA9IGNvZmFjdG9yLnRyYW5zcG9zZSgpO1xuICAgICAgICAvLyBDb21wdXRlIGludmVyc2Ugb2YgdHJhbnNwb3NlZCAvIGRldGVybWluYW50IG9uIGVhY2ggdmFsdWVcbiAgICAgICAgcmV0dXJuIG5ldyBNYXRyaXgodGhpcy5yb3dzLCB0aGlzLmNvbHVtbnMsIHRoaXMudmFsdWVzLm1hcCgocm93LCBpKSA9PiByb3cubWFwKCh2YWwsIGopID0+IHRyYW5zcG9zZWRDb2ZhY3Rvci5hdChpLCBqKSAvIGRldCkpKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBNYXRyaXg7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBNYXRoIFF1YXRcbiAqXG4gKiBUT0RPOiBUbyByZWZhY3RvciB3aXRoICdNYXRyaXgudHMnIHN0eWxlLlxuICovXG5jbGFzcyBRdWF0IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZXMpIHtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xuICAgICAgICBpZiAodmFsdWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMueHl6dyA9IHZhbHVlcztcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgeCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzBdO1xuICAgIH1cbiAgICBnZXQgeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzFdO1xuICAgIH1cbiAgICBnZXQgeigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzJdO1xuICAgIH1cbiAgICBnZXQgdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzWzNdO1xuICAgIH1cbiAgICBnZXQgeHkoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB0aGlzLnZhbHVlc1swXSxcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzFdLFxuICAgICAgICBdO1xuICAgIH1cbiAgICBnZXQgeHl6KCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMF0sXG4gICAgICAgICAgICB0aGlzLnZhbHVlc1sxXSxcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzJdLFxuICAgICAgICBdO1xuICAgIH1cbiAgICBnZXQgeHl6dygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzBdLFxuICAgICAgICAgICAgdGhpcy52YWx1ZXNbMV0sXG4gICAgICAgICAgICB0aGlzLnZhbHVlc1syXSxcbiAgICAgICAgICAgIHRoaXMudmFsdWVzWzNdLFxuICAgICAgICBdO1xuICAgIH1cbiAgICBzZXQgeCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlc1swXSA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQgeSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlc1sxXSA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQgeih2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlc1syXSA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQgdyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlc1szXSA9IHZhbHVlO1xuICAgIH1cbiAgICBzZXQgeHkodmFsdWVzKSB7XG4gICAgICAgIHRoaXMudmFsdWVzWzBdID0gdmFsdWVzWzBdO1xuICAgICAgICB0aGlzLnZhbHVlc1sxXSA9IHZhbHVlc1sxXTtcbiAgICB9XG4gICAgc2V0IHh5eih2YWx1ZXMpIHtcbiAgICAgICAgdGhpcy52YWx1ZXNbMF0gPSB2YWx1ZXNbMF07XG4gICAgICAgIHRoaXMudmFsdWVzWzFdID0gdmFsdWVzWzFdO1xuICAgICAgICB0aGlzLnZhbHVlc1syXSA9IHZhbHVlc1syXTtcbiAgICB9XG4gICAgc2V0IHh5encodmFsdWVzKSB7XG4gICAgICAgIHRoaXMudmFsdWVzWzBdID0gdmFsdWVzWzBdO1xuICAgICAgICB0aGlzLnZhbHVlc1sxXSA9IHZhbHVlc1sxXTtcbiAgICAgICAgdGhpcy52YWx1ZXNbMl0gPSB2YWx1ZXNbMl07XG4gICAgICAgIHRoaXMudmFsdWVzWzNdID0gdmFsdWVzWzNdO1xuICAgIH1cbiAgICBhdChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzW2ldID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb3B5KGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gbmV3IFF1YXQoKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgZGVzdC52YWx1ZXNbaV0gPSB0aGlzLnZhbHVlc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9XG4gICAgcm9sbCgpIHtcbiAgICAgICAgY29uc3QgeCA9IHRoaXMueDtcbiAgICAgICAgY29uc3QgeSA9IHRoaXMueTtcbiAgICAgICAgY29uc3QgeiA9IHRoaXMuejtcbiAgICAgICAgY29uc3QgdyA9IHRoaXMudztcbiAgICAgICAgcmV0dXJuIE1hdGguYXRhbjIoMi4wICogKHggKiB5ICsgdyAqIHopLCB3ICogdyArIHggKiB4IC0geSAqIHkgLSB6ICogeik7XG4gICAgfVxuICAgIHBpdGNoKCkge1xuICAgICAgICBjb25zdCB4ID0gdGhpcy54O1xuICAgICAgICBjb25zdCB5ID0gdGhpcy55O1xuICAgICAgICBjb25zdCB6ID0gdGhpcy56O1xuICAgICAgICBjb25zdCB3ID0gdGhpcy53O1xuICAgICAgICByZXR1cm4gTWF0aC5hdGFuMigyLjAgKiAoeSAqIHogKyB3ICogeCksIHcgKiB3IC0geCAqIHggLSB5ICogeSArIHogKiB6KTtcbiAgICB9XG4gICAgeWF3KCkge1xuICAgICAgICByZXR1cm4gTWF0aC5hc2luKDIuMCAqICh0aGlzLnggKiB0aGlzLnogLSB0aGlzLncgKiB0aGlzLnkpKTtcbiAgICB9XG4gICAgZXF1YWxzKHZlY3RvciwgdGhyZXNob2xkID0gY29uc3RhbnRzXzEuRVBTSUxPTikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMudmFsdWVzW2ldIC0gdmVjdG9yLmF0KGkpKSA+IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc2V0SWRlbnRpdHkoKSB7XG4gICAgICAgIHRoaXMueCA9IDA7XG4gICAgICAgIHRoaXMueSA9IDA7XG4gICAgICAgIHRoaXMueiA9IDA7XG4gICAgICAgIHRoaXMudyA9IDE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjYWxjdWxhdGVXKCkge1xuICAgICAgICBjb25zdCB4ID0gdGhpcy54O1xuICAgICAgICBjb25zdCB5ID0gdGhpcy55O1xuICAgICAgICBjb25zdCB6ID0gdGhpcy56O1xuICAgICAgICB0aGlzLncgPSAtKE1hdGguc3FydChNYXRoLmFicygxLjAgLSB4ICogeCAtIHkgKiB5IC0geiAqIHopKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpbnZlcnNlKCkge1xuICAgICAgICBjb25zdCBkb3QgPSBRdWF0LmRvdCh0aGlzLCB0aGlzKTtcbiAgICAgICAgaWYgKCFkb3QpIHtcbiAgICAgICAgICAgIHRoaXMueHl6dyA9IFswLCAwLCAwLCAwXTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGludkRvdCA9IGRvdCA/IDEuMCAvIGRvdCA6IDA7XG4gICAgICAgIHRoaXMueCAqPSAtaW52RG90O1xuICAgICAgICB0aGlzLnkgKj0gLWludkRvdDtcbiAgICAgICAgdGhpcy56ICo9IC1pbnZEb3Q7XG4gICAgICAgIHRoaXMudyAqPSBpbnZEb3Q7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjb25qdWdhdGUoKSB7XG4gICAgICAgIHRoaXMudmFsdWVzWzBdICo9IC0xO1xuICAgICAgICB0aGlzLnZhbHVlc1sxXSAqPSAtMTtcbiAgICAgICAgdGhpcy52YWx1ZXNbMl0gKj0gLTE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBsZW5ndGgoKSB7XG4gICAgICAgIGNvbnN0IHggPSB0aGlzLng7XG4gICAgICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgICAgIGNvbnN0IHogPSB0aGlzLno7XG4gICAgICAgIGNvbnN0IHcgPSB0aGlzLnc7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xuICAgIH1cbiAgICBub3JtYWxpemUoZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHggPSB0aGlzLng7XG4gICAgICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgICAgIGNvbnN0IHogPSB0aGlzLno7XG4gICAgICAgIGNvbnN0IHcgPSB0aGlzLnc7XG4gICAgICAgIGxldCBsZW5ndGggPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xuICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgICAgZGVzdC54ID0gMDtcbiAgICAgICAgICAgIGRlc3QueSA9IDA7XG4gICAgICAgICAgICBkZXN0LnogPSAwO1xuICAgICAgICAgICAgZGVzdC53ID0gMDtcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCA9IDEgLyBsZW5ndGg7XG4gICAgICAgIGRlc3QueCA9IHggKiBsZW5ndGg7XG4gICAgICAgIGRlc3QueSA9IHkgKiBsZW5ndGg7XG4gICAgICAgIGRlc3QueiA9IHogKiBsZW5ndGg7XG4gICAgICAgIGRlc3QudyA9IHcgKiBsZW5ndGg7XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH1cbiAgICBhZGQob3RoZXIpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzW2ldICs9IG90aGVyLmF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBtdWx0aXBseShvdGhlcikge1xuICAgICAgICBjb25zdCBxMXggPSB0aGlzLnZhbHVlc1swXTtcbiAgICAgICAgY29uc3QgcTF5ID0gdGhpcy52YWx1ZXNbMV07XG4gICAgICAgIGNvbnN0IHExeiA9IHRoaXMudmFsdWVzWzJdO1xuICAgICAgICBjb25zdCBxMXcgPSB0aGlzLnZhbHVlc1szXTtcbiAgICAgICAgY29uc3QgcTJ4ID0gb3RoZXIueDtcbiAgICAgICAgY29uc3QgcTJ5ID0gb3RoZXIueTtcbiAgICAgICAgY29uc3QgcTJ6ID0gb3RoZXIuejtcbiAgICAgICAgY29uc3QgcTJ3ID0gb3RoZXIudztcbiAgICAgICAgdGhpcy54ID0gcTF4ICogcTJ3ICsgcTF3ICogcTJ4ICsgcTF5ICogcTJ6IC0gcTF6ICogcTJ5O1xuICAgICAgICB0aGlzLnkgPSBxMXkgKiBxMncgKyBxMXcgKiBxMnkgKyBxMXogKiBxMnggLSBxMXggKiBxMno7XG4gICAgICAgIHRoaXMueiA9IHExeiAqIHEydyArIHExdyAqIHEyeiArIHExeCAqIHEyeSAtIHExeSAqIHEyeDtcbiAgICAgICAgdGhpcy53ID0gcTF3ICogcTJ3IC0gcTF4ICogcTJ4IC0gcTF5ICogcTJ5IC0gcTF6ICogcTJ6O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc3RhdGljIGRvdChxMSwgcTIpIHtcbiAgICAgICAgcmV0dXJuIHExLnggKiBxMi54ICsgcTEueSAqIHEyLnkgKyBxMS56ICogcTIueiArIHExLncgKiBxMi53O1xuICAgIH1cbiAgICBzdGF0aWMgc3VtKHExLCBxMikge1xuICAgICAgICBjb25zdCBkZXN0ID0gbmV3IFF1YXQoKTtcbiAgICAgICAgZGVzdC54ID0gcTEueCArIHEyLng7XG4gICAgICAgIGRlc3QueSA9IHExLnkgKyBxMi55O1xuICAgICAgICBkZXN0LnogPSBxMS56ICsgcTIuejtcbiAgICAgICAgZGVzdC53ID0gcTEudyArIHEyLnc7XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH1cbiAgICBzdGF0aWMgcHJvZHVjdChxMSwgcTIpIHtcbiAgICAgICAgY29uc3QgZGVzdCA9IG5ldyBRdWF0KCk7XG4gICAgICAgIGNvbnN0IHExeCA9IHExLng7XG4gICAgICAgIGNvbnN0IHExeSA9IHExLnk7XG4gICAgICAgIGNvbnN0IHExeiA9IHExLno7XG4gICAgICAgIGNvbnN0IHExdyA9IHExLnc7XG4gICAgICAgIGNvbnN0IHEyeCA9IHEyLng7XG4gICAgICAgIGNvbnN0IHEyeSA9IHEyLnk7XG4gICAgICAgIGNvbnN0IHEyeiA9IHEyLno7XG4gICAgICAgIGNvbnN0IHEydyA9IHEyLnc7XG4gICAgICAgIGRlc3QueCA9IHExeCAqIHEydyArIHExdyAqIHEyeCArIHExeSAqIHEyeiAtIHExeiAqIHEyeTtcbiAgICAgICAgZGVzdC55ID0gcTF5ICogcTJ3ICsgcTF3ICogcTJ5ICsgcTF6ICogcTJ4IC0gcTF4ICogcTJ6O1xuICAgICAgICBkZXN0LnogPSBxMXogKiBxMncgKyBxMXcgKiBxMnogKyBxMXggKiBxMnkgLSBxMXkgKiBxMng7XG4gICAgICAgIGRlc3QudyA9IHExdyAqIHEydyAtIHExeCAqIHEyeCAtIHExeSAqIHEyeSAtIHExeiAqIHEyejtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfVxuICAgIHN0YXRpYyBjcm9zcyhxMSwgcTIpIHtcbiAgICAgICAgY29uc3QgZGVzdCA9IG5ldyBRdWF0KCk7XG4gICAgICAgIGNvbnN0IHExeCA9IHExLng7XG4gICAgICAgIGNvbnN0IHExeSA9IHExLnk7XG4gICAgICAgIGNvbnN0IHExeiA9IHExLno7XG4gICAgICAgIGNvbnN0IHExdyA9IHExLnc7XG4gICAgICAgIGNvbnN0IHEyeCA9IHEyLng7XG4gICAgICAgIGNvbnN0IHEyeSA9IHEyLnk7XG4gICAgICAgIGNvbnN0IHEyeiA9IHEyLno7XG4gICAgICAgIGNvbnN0IHEydyA9IHEyLnc7XG4gICAgICAgIGRlc3QueCA9IHExdyAqIHEyeiArIHExeiAqIHEydyArIHExeCAqIHEyeSAtIHExeSAqIHEyeDtcbiAgICAgICAgZGVzdC55ID0gcTF3ICogcTJ3IC0gcTF4ICogcTJ4IC0gcTF5ICogcTJ5IC0gcTF6ICogcTJ6O1xuICAgICAgICBkZXN0LnogPSBxMXcgKiBxMnggKyBxMXggKiBxMncgKyBxMXkgKiBxMnogLSBxMXogKiBxMnk7XG4gICAgICAgIGRlc3QudyA9IHExdyAqIHEyeSArIHExeSAqIHEydyArIHExeiAqIHEyeCAtIHExeCAqIHEyejtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfVxuICAgIHN0YXRpYyBzaG9ydE1peChxMSwgcTIsIHRpbWUpIHtcbiAgICAgICAgY29uc3QgZGVzdCA9IG5ldyBRdWF0KCk7XG4gICAgICAgIGlmICh0aW1lIDw9IDAuMCkge1xuICAgICAgICAgICAgZGVzdC54eXp3ID0gcTEueHl6dztcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRpbWUgPj0gMS4wKSB7XG4gICAgICAgICAgICBkZXN0Lnh5encgPSBxMi54eXp3O1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvcyA9IFF1YXQuZG90KHExLCBxMik7XG4gICAgICAgIGNvbnN0IHEyYSA9IHEyLmNvcHkoKTtcbiAgICAgICAgaWYgKGNvcyA8IDAuMCkge1xuICAgICAgICAgICAgcTJhLmludmVyc2UoKTtcbiAgICAgICAgICAgIGNvcyA9IC1jb3M7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGswO1xuICAgICAgICBsZXQgazE7XG4gICAgICAgIGlmIChjb3MgPiAwLjk5OTkpIHtcbiAgICAgICAgICAgIGswID0gMSAtIHRpbWU7XG4gICAgICAgICAgICBrMSA9IDAgKyB0aW1lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc2luID0gTWF0aC5zcXJ0KDEgLSBjb3MgKiBjb3MpO1xuICAgICAgICAgICAgY29uc3QgYW5nbGUgPSBNYXRoLmF0YW4yKHNpbiwgY29zKTtcbiAgICAgICAgICAgIGNvbnN0IG9uZU92ZXJTaW4gPSAxIC8gc2luO1xuICAgICAgICAgICAgazAgPSBNYXRoLnNpbigoMSAtIHRpbWUpICogYW5nbGUpICogb25lT3ZlclNpbjtcbiAgICAgICAgICAgIGsxID0gTWF0aC5zaW4oKDAgKyB0aW1lKSAqIGFuZ2xlKSAqIG9uZU92ZXJTaW47XG4gICAgICAgIH1cbiAgICAgICAgZGVzdC54ID0gazAgKiBxMS54ICsgazEgKiBxMmEueDtcbiAgICAgICAgZGVzdC55ID0gazAgKiBxMS55ICsgazEgKiBxMmEueTtcbiAgICAgICAgZGVzdC56ID0gazAgKiBxMS56ICsgazEgKiBxMmEuejtcbiAgICAgICAgZGVzdC53ID0gazAgKiBxMS53ICsgazEgKiBxMmEudztcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfVxuICAgIHN0YXRpYyBtaXgocTEsIHEyLCB0aW1lKSB7XG4gICAgICAgIGNvbnN0IGRlc3QgPSBuZXcgUXVhdCgpO1xuICAgICAgICBjb25zdCBjb3NIYWxmVGhldGEgPSBxMS54ICogcTIueCArIHExLnkgKiBxMi55ICsgcTEueiAqIHEyLnogKyBxMS53ICogcTIudztcbiAgICAgICAgaWYgKE1hdGguYWJzKGNvc0hhbGZUaGV0YSkgPj0gMS4wKSB7XG4gICAgICAgICAgICBkZXN0Lnh5encgPSBxMS54eXp3O1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFsZlRoZXRhID0gTWF0aC5hY29zKGNvc0hhbGZUaGV0YSk7XG4gICAgICAgIGNvbnN0IHNpbkhhbGZUaGV0YSA9IE1hdGguc3FydCgxLjAgLSBjb3NIYWxmVGhldGEgKiBjb3NIYWxmVGhldGEpO1xuICAgICAgICBpZiAoTWF0aC5hYnMoc2luSGFsZlRoZXRhKSA8IDAuMDAxKSB7XG4gICAgICAgICAgICBkZXN0LnggPSBxMS54ICogMC41ICsgcTIueCAqIDAuNTtcbiAgICAgICAgICAgIGRlc3QueSA9IHExLnkgKiAwLjUgKyBxMi55ICogMC41O1xuICAgICAgICAgICAgZGVzdC56ID0gcTEueiAqIDAuNSArIHEyLnogKiAwLjU7XG4gICAgICAgICAgICBkZXN0LncgPSBxMS53ICogMC41ICsgcTIudyAqIDAuNTtcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJhdGlvQSA9IE1hdGguc2luKCgxIC0gdGltZSkgKiBoYWxmVGhldGEpIC8gc2luSGFsZlRoZXRhO1xuICAgICAgICBjb25zdCByYXRpb0IgPSBNYXRoLnNpbih0aW1lICogaGFsZlRoZXRhKSAvIHNpbkhhbGZUaGV0YTtcbiAgICAgICAgZGVzdC54ID0gcTEueCAqIHJhdGlvQSArIHEyLnggKiByYXRpb0I7XG4gICAgICAgIGRlc3QueSA9IHExLnkgKiByYXRpb0EgKyBxMi55ICogcmF0aW9CO1xuICAgICAgICBkZXN0LnogPSBxMS56ICogcmF0aW9BICsgcTIueiAqIHJhdGlvQjtcbiAgICAgICAgZGVzdC53ID0gcTEudyAqIHJhdGlvQSArIHEyLncgKiByYXRpb0I7XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUF4aXNBbmdsZShheGlzLCBhbmdsZSkge1xuICAgICAgICBpZiAoYXhpcy5yb3dzICE9PSAzKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYXhpcyB2ZWN0b3IgbXVzdCBiZSBpbiAzRCEnKTtcbiAgICAgICAgY29uc3QgZGVzdCA9IG5ldyBRdWF0KCk7XG4gICAgICAgIGFuZ2xlICo9IDAuNTtcbiAgICAgICAgY29uc3Qgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICBkZXN0LnggPSBheGlzLmF0KDApICogc2luO1xuICAgICAgICBkZXN0LnkgPSBheGlzLmF0KDEpICogc2luO1xuICAgICAgICBkZXN0LnogPSBheGlzLmF0KDIpICogc2luO1xuICAgICAgICBkZXN0LncgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFF1YXQ7XG5RdWF0LmlkZW50aXR5ID0gbmV3IFF1YXQoKS5zZXRJZGVudGl0eSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVQU0lMT04gPSAwLjAwMDAxO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBWZWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHJvd3MsIHZhbHVlcykge1xuICAgICAgICB0aGlzLl9yb3dzID0gcm93cztcbiAgICAgICAgLy8gQ3JlYXRlIG1hdHJpeCBmaWxsZWQgd2l0aCAwIGJ5IGRlZmF1bHRcbiAgICAgICAgdGhpcy5fdmFsdWVzID0gbmV3IEFycmF5KHJvd3MpLmZpbGwoMCk7XG4gICAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCByb3dzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm93cztcbiAgICB9XG4gICAgZ2V0IHZhbHVlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHZhbHVlcyBpbnRvIHRoZSB2ZWN0b3IuXG4gICAgICogSWYgdGhlIHBhcmFtZXRlcnMgdmVjdG9yIGlzIHRvIHdpZGUsIHRoZSB2YWx1ZXMgYXJlIGNyb3BwZWQgdG8gdGhlIGN1cnJlbnQgdmVjdG9yIHNpemUuXG4gICAgICogSXQgdGhlIHBhcmFtZXRlcnMgdmVjdG9yIGlzIHRvIHNtYWxsLCByZW1haW5pbmcgY2VsbHMgd2lsbCBiZSBmaWxsZWQgd2l0aCAwLlxuICAgICAqIEBwYXJhbSBuZXdWYWx1ZXMgQXJyYXlzIG9mIG5ldyB2YWx1ZXMuXG4gICAgICovXG4gICAgc2V0IHZhbHVlcyhuZXdWYWx1ZXMpIHtcbiAgICAgICAgY29uc3QgbWluU2l6ZSA9IE1hdGgubWluKHRoaXMudmFsdWVzLmxlbmd0aCwgbmV3VmFsdWVzLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWluU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlc1tpXSA9IG5ld1ZhbHVlc1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYSBtYXRyaXggdmFsdWUsIGZyb20gaXRzIHBvc2l0aW9uXG4gICAgICogQHBhcmFtIHJvdyBNYXRyaXggbGluZSwgZnJvbSAwIHRvIGByb3dzYFxuICAgICAqL1xuICAgIGF0KHJvdykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNbcm93XTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhbGwgbWF0cml4IHZhbHVlcyB0byAwXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMudmFsdWVzID0gdGhpcy52YWx1ZXMuZmlsbCgwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGFuIG5ldyByb3cgdG8gdGhlIG1hdHJpeCwgZmlsbGVkIHdpdGggMFxuICAgICAqL1xuICAgIGFkZEFWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IodGhpcy5yb3dzICsgMSwgdGhpcy52YWx1ZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0d28gbWF0cml4IGFyZSBlcXVhbHMsIHZhbHVlIGJ5IHZhbHVlXG4gICAgICogQHBhcmFtIG1hdCBUaGUgbWF0cml4IGFnYWluc3QgdG8gY2hlY2sgZXF1YWxpdHlcbiAgICAgKi9cbiAgICBlcXVhbHModmVjKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5yb3dzID09PSB2ZWMucm93cylcbiAgICAgICAgICAgICYmIHRoaXMudmFsdWVzLnJlZHVjZSgoZXFsLCB2YWwsIGkpID0+IGVxbCAmJiB2ZWMuYXQoaSkgPT09IHZhbCwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5lZ2F0ZSBhbGwgdmFsdWVzIG9mIHRoZSB2ZWN0b3IgKGdldCB0aGUgb3Bwb3NpdGUgc2lnbilcbiAgICAgKiBAcmV0dXJuIEEgbmV3IHZlY3RvciB3aG9zZSBhbGwgdmFsdWVzIGhhdmUgdGhlIG9wcG9zZWQgc2lnblxuICAgICAqL1xuICAgIG5lZ2F0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IodGhpcy5yb3dzLCB0aGlzLnZhbHVlcy5tYXAoKHZhbCkgPT4gLXZhbCkpO1xuICAgIH1cbiAgICAvKiogR2V0IHRoZSBsZW5ndGggb2YgdGhlIHZlY3RvciAqL1xuICAgIGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnNxdWFyZWRMZW5ndGgoKSk7XG4gICAgfVxuICAgIC8qKiBHZXQgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIHRoZSB2ZWN0b3IgKi9cbiAgICBzcXVhcmVkTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb3QodGhpcyk7XG4gICAgICAgIC8vIHJldHVybiB0aGlzLnZhbHVlcy5yZWR1Y2UoKHJlcywgdmFsKSA9PiByZXMgKyAodmFsICogdmFsKSwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhbGwgdmVjdG9yIHZhbHVlcyB3aXRoIHRoZSBzYW1lIHBvc2l0aW9uIHZhbHVlIG9mIHRoZSBvcGVyYW5kIHZlY3RvclxuICAgICAqIEBwYXJhbSB2ZWN0b3IgVGhlIG9wZXJhbmQgdmVjdG9yXG4gICAgICogQHRocm93cyBFcnJvciBpZiB0aGUgdHdvIHZlY3RvcnMgZG9uJ3QgaGF2ZSB0aGUgc2FtZSBkaW1lbnNpb25cbiAgICAgKiBAcmV0dXJuIGEgbmV3IFZlY3RvciB3aXRoIHRoZSByZXN1bHQgdmFsdWVzXG4gICAgICovXG4gICAgYWRkKHZlY3Rvcikge1xuICAgICAgICBpZiAodGhpcy5yb3dzICE9PSB2ZWN0b3Iucm93cylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZlY3RvcnMgZG9uJ3QgaGF2ZSB0aGUgc2FtZSBkaW1lbnNpb24hXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRlT25BbGxWYWx1ZXMoKHZhbCwgaSkgPT4gKHZhbCArIHZlY3Rvci5hdChpKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdW5zdHJhY3QgYWxsIHZlY3RvciB2YWx1ZXMgd2l0aCB0aGUgc2FtZSBwb3NpdGlvbiB2YWx1ZSBvZiB0aGUgb3BlcmFuZCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gdmVjdG9yIFRoZSBvcGVyYW5kIHZlY3RvclxuICAgICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIHR3byB2ZWN0b3JzIGRvbid0IGhhdmUgdGhlIHNhbWUgZGltZW5zaW9uXG4gICAgICogQHJldHVybiBhIG5ldyBWZWN0b3Igd2l0aCB0aGUgcmVzdWx0IHZhbHVlc1xuICAgICAqL1xuICAgIHN1YnN0cmFjdCh2ZWN0b3IpIHtcbiAgICAgICAgaWYgKHRoaXMucm93cyAhPT0gdmVjdG9yLnJvd3MpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWZWN0b3JzIGRvbid0IGhhdmUgdGhlIHNhbWUgZGltZW5zaW9uIVwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlcmF0ZU9uQWxsVmFsdWVzKCh2YWwsIGkpID0+ICh2YWwgLSB2ZWN0b3IuYXQoaSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgYWxsIHZlY3RvciB2YWx1ZXMgd2l0aCB0aGUgc2FtZSBwb3NpdGlvbiB2YWx1ZSBvZiB0aGUgb3BlcmFuZCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gdmVjdG9yIFRoZSBvcGVyYW5kIHZlY3RvclxuICAgICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIHR3byB2ZWN0b3JzIGRvbid0IGhhdmUgdGhlIHNhbWUgZGltZW5zaW9uXG4gICAgICogQHJldHVybiBhIG5ldyBWZWN0b3Igd2l0aCB0aGUgcmVzdWx0IHZhbHVlc1xuICAgICAqL1xuICAgIG11bHRpcGx5KHZlY3Rvcikge1xuICAgICAgICBpZiAodGhpcy5yb3dzICE9PSB2ZWN0b3Iucm93cylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZlY3RvcnMgZG9uJ3QgaGF2ZSB0aGUgc2FtZSBkaW1lbnNpb24hXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRlT25BbGxWYWx1ZXMoKHZhbCwgaSkgPT4gKHZhbCAqIHZlY3Rvci5hdChpKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgYWxsIHZlY3RvciB2YWx1ZXMgd2l0aCB0aGUgc2FtZSBwb3NpdGlvbiB2YWx1ZSBvZiB0aGUgb3BlcmFuZCB2ZWN0b3JcbiAgICAgKiBCZSBhd2FyZSBvZiBkaXZpc2lvbnMgYnkgMCFcbiAgICAgKiBAcGFyYW0gdmVjdG9yIFRoZSBvcGVyYW5kIHZlY3RvclxuICAgICAqIEB0aHJvd3MgRXJyb3IgaWYgdGhlIHR3byB2ZWN0b3JzIGRvbid0IGhhdmUgdGhlIHNhbWUgZGltZW5zaW9uXG4gICAgICogQHJldHVybiBhIG5ldyBWZWN0b3Igd2l0aCB0aGUgcmVzdWx0IHZhbHVlc1xuICAgICAqL1xuICAgIGRpdmlkZSh2ZWN0b3IpIHtcbiAgICAgICAgaWYgKHRoaXMucm93cyAhPT0gdmVjdG9yLnJvd3MpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWZWN0b3JzIGRvbid0IGhhdmUgdGhlIHNhbWUgZGltZW5zaW9uIVwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlcmF0ZU9uQWxsVmFsdWVzKCh2YWwsIGkpID0+ICh2YWwgLyB2ZWN0b3IuYXQoaSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgYWxsIHZlY3RvciB2YWx1ZXMgYnkgdGhlIGdpdmVuIG51bWJlclxuICAgICAqIEBwYXJhbSBzY2FsZSBUaGUgbnVtYmVyIHRvIG11bHRpcGx5IHdpdGggdGhlIHZhbHVlc1xuICAgICAqL1xuICAgIHNjYWxlKHNjYWxlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZXJhdGVPbkFsbFZhbHVlcygodmFsKSA9PiAodmFsICogc2NhbGUpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUnVuIGEgZnVuY3Rpb24gb24gYWxsIHZlY3RvciB2YWx1ZXMsIGFzIGEgbWFwLlxuICAgICAqIEBwYXJhbSBvcGVyYXRpb24gVGhlIG1hcHBpbmcgbWV0aG9kXG4gICAgICogQHJldHVybiBhIG5ldyBWZWN0b3Igd2l0aCB0aGUgb3BlcmF0aW9uIGRvbmUgb24gYWxsIGl0cyB2YWx1ZXNcbiAgICAgKi9cbiAgICBvcGVyYXRlT25BbGxWYWx1ZXMob3BlcmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKHRoaXMucm93cywgdGhpcy52YWx1ZXMubWFwKG9wZXJhdGlvbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbm9ybWFsaXplZCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJuIFRoZSBub3JtYWxpemVkIHZlY3RvclxuICAgICAqL1xuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgY29uc3QgdmVjdG9yTGVuZ3RoID0gdGhpcy5sZW5ndGgoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IodGhpcy5yb3dzLCB0aGlzLnZhbHVlcy5tYXAoKHZhbCkgPT4gdmFsIC8gdmVjdG9yTGVuZ3RoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB2ZWN0b3JzXG4gICAgICogQHBhcmFtIHZlY3RvciBUaGUgb3BlcmFuZCB2ZWN0b3JcbiAgICAgKi9cbiAgICBkb3QodmVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcy5yZWR1Y2UoKHJlcywgdmFsLCBpKSA9PiByZXMgKyAodmFsICogdmVjdG9yLmF0KGkpKSwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBjcm9zcyBwcm9kdWN0IG9mIHZlY3RvcnMgc1xuICAgICAqIEBwYXJhbSB2ZWN0b3IgVGhlIG9wZXJhbmQgdmVjdG9yXG4gICAgICovXG4gICAgY3Jvc3ModmVjdG9yKSB7XG4gICAgICAgIGNvbnN0IGNyb3NzVmFsdWVzID0gbmV3IEFycmF5KDMpO1xuICAgICAgICBjcm9zc1ZhbHVlc1swXSA9IHRoaXMuYXQoMSkgKiB2ZWN0b3IuYXQoMikgLSB0aGlzLmF0KDIpICogdmVjdG9yLmF0KDEpO1xuICAgICAgICBjcm9zc1ZhbHVlc1sxXSA9IHRoaXMuYXQoMikgKiB2ZWN0b3IuYXQoMCkgLSB0aGlzLmF0KDApICogdmVjdG9yLmF0KDIpO1xuICAgICAgICBjcm9zc1ZhbHVlc1syXSA9IHRoaXMuYXQoMCkgKiB2ZWN0b3IuYXQoMSkgLSB0aGlzLmF0KDEpICogdmVjdG9yLmF0KDApO1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcigzLCBjcm9zc1ZhbHVlcyk7XG4gICAgfVxuICAgIG1peCh2ZWN0b3IsIHRpbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IodGhpcy5yb3dzLCB0aGlzLnZhbHVlcy5tYXAoKHZhbCwgaSkgPT4gdmFsICsgdGltZSAqICh2ZWN0b3IuYXQoaSkgLSB2YWwpKSk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gVmVjdG9yO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==